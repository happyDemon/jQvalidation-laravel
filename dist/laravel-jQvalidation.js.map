{"version":3,"sources":["laravel-jQvalidation.js","src/utils.js","src/rules/string.js","src/rules/ins.js","src/rules/dates.js","src/rules/comparison.js","src/rules/requireds.js","src/rules/files.js","src/main.js"],"names":[],"mappings":"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","file":"laravel-jQvalidation.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery'), require('moment')) :\n    typeof define === 'function' && define.amd ? define(['jquery', 'moment'], factory) :\n    global.LjQv = factory(global.jQuery, global.moment)\n}(this, function (jQuery, moment) { 'use strict';\n\n    /**\n     * Helper functions.\n     */\n    var utils = {\n        parseArrayStringParameter: function (parameter) {\n            var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n            if (!m)\n                throw 'Requirement is not an array: \"' + parameter + '\"';\n\n            return m[1].replace(/\\'+/g, '').split(',');\n        },\n        /**\n         * This is used by various validation rules that rely on another input for validation.\n         *\n         * This function adds a 'change' event listener which forces the original to be validated again.\n         *\n         * @param rule              Name of the rule this change handler is for\n         * @param otherElement      Which element to bind this to\n         * @param element           The element which this bind request is coming from\n         * @param jQvalidator       The validator instance\n         * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n         */\n        bindChangeToOtherElement: function (rule, otherElement, element, jQvalidator, originalNotEmpty) {\n            var $elem = jQuery(otherElement);\n            var elData = $elem.data('larajqv-rules');\n\n            // None were added yet, initialise\n            if (elData === undefined) {\n                elData = [rule];\n                $elem.data('larajqv-rules', elData);\n            }\n            // Initialised, but not present\n            else if (elData.indexOf(rule) == -1) {\n                elData.push(rule);\n                $elem.data('larajqv-rules', elData);\n            }\n            // Already bound\n            else {\n                return;\n            }\n\n            // If not yet bound\n            $elem.on('change', function () {\n                if (originalNotEmpty === true && $elem.val() != '') {\n                    jQvalidator.element('#'+jQuery(element).attr('id'));\n                }\n                else if (originalNotEmpty !== true) {\n                    console.log(jQuery(element).attr('id'));\n                    jQvalidator.element('#'+jQuery(element).attr('id'));\n                }\n            });\n        }\n    };\n\n    // The value should consist of letters\n    jQuery.validator.addMethod(\n        'alpha',\n        function(value, element, param){\n            return RegExp('/^[\\pL\\pM]+$/u').test(value);\n        },\n        'The value is in an invalid format.'\n    );\n\n    // THe value should consist of letters, dashes and underscores\n    jQuery.validator.addMethod(\n        'alphaDash',\n        function(value, element, param){\n            return RegExp('/^[\\pL\\pM\\pN_-]+$/u').test(value);\n        },\n        'This value is not acceptable.'\n    );\n\n    // THe value should be alpha numeric\n    jQuery.validator.addMethod(\n        'alphaNum',\n        function(value, element){\n            return RegExp('/^[\\pL\\pM\\pN]+$/u').test(value);\n        },\n        'A duplicate value has been selected.'\n    );\n\n    // Validate the value against a regex pattern\n    jQuery.validator.addMethod(\n        'regex',\n        function(value, element, param){\n            return RegExp(param).test(value);\n        },\n        'The value is in an invalid format.'\n    );\n\n    // Check if the value is within a comma-separated list (val1,val2,..)\n    jQuery.validator.addMethod(\n        'in',\n        function(value, element, param){\n            var possibles = param.split(',');\n\n            return possibles.indexOf(value) > -1;\n        },\n        'The provided value is not present in the list.'\n    );\n\n    // Check if the value is not in a comma-separated list (val1,val2,..)\n    jQuery.validator.addMethod(\n        'notIn',\n        function(value, element, param){\n            var possibles = param.split(',');\n\n            return possibles.indexOf(value) == -1;\n        },\n        'The provided value is not present in the list.'\n    );\n\n    // Valid date formats\n    jQuery.validator.setDefaults({\n        dateFormats: ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD']\n    });\n\n    // Check if the value is a date\n    jQuery.validator.addMethod('date', function (value, element, state) {\n        return moment(value, formatDatePhpToJs.getDateFormatsOption(this), true).isValid();\n    }, 'You should provide a valid date.');\n\n\n    // Check if the value is a date in a specific format\n    jQuery.validator.addMethod('dateFormat', function (value, element, parameter) {\n        return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n    }, 'The date you entered is not in the right format (%s).');\n\n\n    // Check if the value is a date before the specified date\n    jQuery.validator.addMethod('before', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n\n        var beforeDate = moment(parameter, dateFormats, true);\n\n        // If it's not a valid date, error\n        if (beforeDate === false)\n            return false;\n\n        return moment(value, dateFormats) < beforeDate;\n    }, 'The date you entered should be before %s.');\n\n    // Check if the value is a date before the specified date (from another input)\n    jQuery.validator.addMethod('beforeInput', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var beforeInput = jQuery(parameter);\n\n        // If we can't find the input, return true\n        if (beforeInput.length == 0)\n            return true;\n\n        var beforeVal = beforeInput.val();\n\n        // If the val is empty, return true\n        if (beforeVal == '')\n            return true;\n\n        var beforeDate = moment(beforeVal, dateFormats, true);\n\n        // If the before date isn't valid, error out\n        if (beforeDate.isValid() === false) {\n            console.warn(parameter + ' input does not contain a valid date');\n            return false;\n        }\n\n        var thisDate = moment(value, dateFormats, true);\n\n        // If the value's date isn't valid, error out\n        if (thisDate.isValid() === false) {\n            console.warn('the input being checked does not contain a valid date');\n            return false;\n        }\n\n        return thisDate < beforeDate;\n    }, 'The date you entered should be before %s.');\n\n\n    // Check if the value is a date before the specified date\n    jQuery.validator.addMethod('after', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var afterDate = moment(parameter, dateFormats, true);\n\n        // If it's not a valid date, error\n        if (afterDate === false)\n            return false;\n\n        return moment(value, dateFormats) > afterDate;\n    }, 'The date you entered should be after %s.');\n\n    // Check if the value is a date before the specified date (from another input)\n    jQuery.validator.addMethod('afterInput', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var afterInput = jQuery(parameter);\n\n        console.log(this, dateFormats);\n\n        // If we can't find the input, return true\n        if (afterInput.length == 0)\n            return true;\n\n        var afterVal = afterInput.val();\n\n        // If the val is empty, return true\n        if (afterVal == '')\n            return true;\n\n        var afterDate = moment(afterVal, dateFormats, true);\n\n        // If the after date isn't valid, error out\n        if (afterDate.isValid() === false) {\n            console.warn(parameter + ' input does not contain a valid date');\n            return false;\n        }\n\n        var thisDate = moment(value, dateFormats, true);\n\n        // If the value's date isn't valid, error out\n        if (thisDate.isValid() === false) {\n            console.warn('the input being checked does not contain a valid date');\n            return false;\n        }\n\n        return thisDate > afterDate;\n    }, 'The date you entered should be after %s.');\n\n    // convert PHP date format to moment JS date format\n    var formatDatePhpToJs = window.formatDatePhpToJs = {\n        mapChars: {\n            d: 'DD',\n            D: 'ddd',\n            j: 'D',\n            l: 'dddd',\n            N: 'E',\n            S: function () {\n                return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n            },\n            w: 'd',\n            z: function () {\n                return this.format('DDD', true) - 1;\n            },\n            W: 'W',\n            F: 'MMMM',\n            m: 'MM',\n            M: 'MMM',\n            n: 'M',\n            t: function () {\n                return this.daysInMonth();\n            },\n            L: function () {\n                return this.isLeapYear() ? 1 : 0;\n            },\n            o: 'GGGG',\n            Y: 'YYYY',\n            y: 'YY',\n            a: 'a',\n            A: 'A',\n            B: function () {\n                var thisUTC = this.clone().utc(),\n                // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                    swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n                return Math.floor(swatch * 1000 / 24);\n            },\n            g: 'h',\n            G: 'H',\n            h: 'hh',\n            H: 'HH',\n            i: 'mm',\n            s: 'ss',\n            u: '[u]', // not sure if moment has this\n            e: '[e]', // moment does not have this\n            I: function () {\n                return this.isDST() ? 1 : 0;\n            },\n            O: 'ZZ',\n            P: 'Z',\n            T: '[T]', // deprecated in moment\n            Z: function () {\n                return parseInt(this.format('ZZ', true), 10) * 36;\n            },\n            c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n            r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n            U: 'X'\n        },\n        formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n        convert: function (PHPDateFormat) {\n            return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n                return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n            })\n        },\n        getDateFormatsOption: function (jQvalidation) {\n            return jQvalidation.settings.dateFormats;\n        }\n    }\n\n    // THe value should be different from another input's value\n    jQuery.validator.addMethod(\n        'different',\n        function (value, element, param) {\n            console.log(param, element); \n            // Re-run validation if the other element's value changes\n            utils.bindChangeToOtherElement('different', param, element, this);\n\n            var otherValue = jQuery(param).val();\n\n            console.log(otherValue, value);\n\n            // If the other elem's empty or not the same return true\n            return otherValue == '' || otherValue != value;\n        },\n        'This value is not acceptable.'\n    );\n\n    // THe value should be distinct within its sibling checkboxes\n    jQuery.validator.addMethod(\n        'distinct',\n        function (value, element) {\n            // Only validate checkboxes\n            if (jQuery(element).attr('type') != 'checkbox')\n                return true;\n\n            // get checked inputs\n            var checkedInputs = $('input[name=\"' + jQuery(element).attr('name') + '\"]:checked');\n            var inputValues = [];\n            var allUnique = true;\n\n            if (checkedInputs.length > 0) {\n                checkedInputs.each(function () {\n                    if (inputValues.indexOf($(this).val()) > -1) {\n                        allUnique = false;\n                    }\n                    inputValues.push($(this).val())\n                });\n            }\n\n            return allUnique;\n        },\n        'A duplicate value has been selected.'\n    );\n\n    // The value should be located in one of the checkbox's checked values\n    jQuery.validator.addMethod('inArray', function (value, element, otherFieldName) {\n        var thisElement = jQuery(element);\n\n        var values = [];\n\n        // Check if we're dealing with a text field\n        if (otherFieldName.substring(0, 1) == '#') {\n            // Bind a change event\n            utils.bindChangeToOtherElement('inArray', otherFieldName, element, this, true);\n\n            // If it's a text field we're assuming that it's a list of comma separated values\n            return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n        }\n\n        var self = this;\n        // Bind a change handler to the checkboxes\n        jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n            utils.bindChangeToOtherElement('inArray', this, element, self, true);\n        });\n\n        // Get the selected values of a checkbox by it's name\n        jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n            values.push(jQuery(this).val());\n        });\n\n        // Check if the value is in there\n        return values.indexOf(value) > -1;\n    }, 'This value is incorrect.');\n\n    // The value is required only if another input's value matched one of the defined ones.\n    // the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    jQuery.validator.addMethod('requiredIf', function (value, element, parameters) {\n        // Normalise the parameters\n        var values = (jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Get the other input's selector\n        var field = values[0];\n\n        // Get the values it should contain to mark this one as required\n        parameters = values.slice(1);\n\n        // make sure that the other element get's a change event\n        utils.bindChangeToOtherElement('requiredIf', field, element, this);\n\n        // Only required to check if the value is empty\n        if (value.length == 0) {\n            var fieldValue = jQuery(field).val();\n\n            return parameters.indexOf(fieldValue) == -1;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if other field does not contain any of the specified values\n    // the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    jQuery.validator.addMethod('requiredUnless', function (value, element, parameters) {\n        // Normalise the parameters\n        var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Get the other input's selector\n        var field = values[0];\n\n        // Get the values it should contain to mark this one as required\n        parameters = values.slice(1);\n\n        // make sure that the other element get's a change event\n        utils.bindChangeToOtherElement('requiredUnless', field, element, this);\n\n        // Only required to check if the value is empty\n        if (value.length == 0) {\n\n            var fieldValue = jQuery(field).val();\n\n            // It's not required if the input has one of the values\n            return parameters.indexOf(fieldValue) > -1;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if  any of the inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n    jQuery.validator.addMethod('requiredWith', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AnyPresent = false;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWith', id, element, this);\n\n                // If the element is in the dom and has a value\n                if ($elem.length > 0 && $elem.val() != '') {\n                    AnyPresent = true;\n                }\n            });\n\n            return !AnyPresent;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if all other inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    jQuery.validator.addMethod('requiredWithAll', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AllPresent = true;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWithAll', id, element, this);\n\n                // If the value isn't in the dom or is empty\n                if ($elem.length == 0 || $elem.val() == '') {\n                    AllPresent = false;\n                }\n            });\n\n            return !AllPresent;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if any of the inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n\n    jQuery.validator.addMethod('requiredWithout', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AnyPresent = false;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWithAll', id, element, this);\n\n                if ($elem.length == 0 || $elem.val() == '') {\n                    AnyPresent = true;\n                }\n            });\n\n            return AnyPresent;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if all other inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    jQuery.validator.addMethod('requiredWithoutAll', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AllEmpty = true;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWithAll', id, element, this);\n\n                if ($elem.length == 1 && $elem.val() != '') {\n                    AllEmpty = false;\n                }\n            });\n\n            return AllEmpty;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n    var filesSizes = {\n        b: 1,\n        kb: 1024,\n        mb: 1024 * 1024,\n        gb: 1024 * 1024 * 1024,\n    };\n\n    // Make sure all files within the inputs are equal to or smaller than the defined size.\n    jQuery.validator.addMethod('fileSizeMax', function (value, element, params) {\n                var maxSize = params[0];\n                sizeMultiplyer = params[1].toLowerCase();\n                var files = element.files;\n\n                // Multiply the max file size\n                maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n                console.log(maxSize);\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        console.log(files[i].size);\n                        if (files[i].size > maxSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            }, 'Your file(s) are too big.');\n\n\n    // Make sure all files within the inputs are equal to or bigger than the defined size.\n    jQuery.validator.addMethod('fileSizeMin', function (value, element, params) {\n                var files = element.files;\n\n                // Multiply the min file size\n                var minSize = params[0] * filesSizes[params[1].toLowerCase()];\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (files[i].size < minSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            }, 'Your file(s) should are too small.');\n\n\n    // Make sure all files within the inputs are between the defined sizes.\n    jQuery.validator.addMethod('fileSizeBetween', function (value, element, params) {\n                var files = element.files;\n\n                // Multiply the file sizes\n                var minSize = params[0] * filesSizes[params[2].toLowerCase()];\n                var maxSize = params[1] * filesSizes[params[2].toLowerCase()];\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (files[i].size <= minSize || files[i].size >= maxSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            }, 'Your file(s) should be between %s and %s %s.');\n\n\n    // Make sure all files within the input are an image\n    jQuery.validator.addMethod('image', function (value, element, param) {\n                var files = element.files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (!files[i].type.match('image/*')) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            }, 'This is not an image.');\n\n\n    // Make sure all files within the input have one of the defined mimetypes\n    jQuery.validator.addMethod('fileMimetype', function (value, element, mimetypes) {\n                var allMimes = utils.parseArrayStringParameter(mimetypes);\n\n                var files = element.files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (allMimes.indexOf(files[i].type) == -1) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },'This file does not have the correct mimetype \"%s\".');\n\n\n    // Make sure all files within the input have one of the defined extensions\n    jQuery.validator.addMethod('fileExt', function (value, element, extensions) {\n                var allExts = utils.parseArrayStringParameter(extensions);\n\n                var files = element.files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        var explodeNames = files[i].name.split('.');\n\n                        if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },'This file does not have the correct extensions.');\n\n    // Make sure all images within the input have specific dimensions\n    jQuery.validator.addMethod('dimensions', function (value, element, param) {\n                var files = element.files;\n\n                // @todo redo this?\n                var options = (jQuery.isJSON(param)) ? param : JSON.parse(param);\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    var defer = jQuery.Deferred();\n                    var _URL = window.URL || window.webkitURL;\n\n                    var image = new Image;\n\n                    // Validate once t he image is loaded\n                    image.onload = function () {\n                        var width = this.width;\n                        var height = this.height;\n\n                        // Check min width, if defined\n                        if (typeof options.min_width != 'undefined') {\n                            if (width < options.min_width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check max width, if defined\n                        if (typeof options.max_width != 'undefined') {\n                            if (width > options.max_width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check min height, if defined\n                        if (typeof options.min_height != 'undefined') {\n                            if (height < options.min_height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check max height, if defined\n                        if (typeof options.max_height != 'undefined') {\n                            if (height > options.max_height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check width, if defined\n                        if (typeof options.width != 'undefined') {\n                            if (width != options.width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check height, if defined\n                        if (typeof options.height != 'undefined') {\n                            if (height != options.height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check ratio, if defined\n                        if (typeof options.ratio != 'undefined') {\n                            var splitRatio = options.ratio.split(':');\n                            if (splitRatio[0] / splitRatio[1] != width / height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        defer.resolve(image);\n                    };\n\n                    // On error, reject the promise\n                    image.onerror = function () {\n                        console.warn('image load error');\n                        defer.reject();\n                    }\n\n                    image.src = _URL.createObjectURL(files[0]);\n\n                    return defer.promise().then(function(image){\n                        // Clean up\n                        image = null;\n\n                        return true;\n                    }, function(image){\n                        // Clean up\n                        image = null;\n\n                        return false;\n                    });\n                }\n\n                return true;\n            });\n\n    /**\n     * Overwrite core Parsley methods.\n     *\n     * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n     */\n    window.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n        // Normally this was intended Internal only.\n        // Field is required if have required constraint without `false` value\n        _isRequired: function () {\n\n            var requiredRules = [\n                // This one comes out of the box with parsley\n                'required',\n\n                // These ones were added with this library\n                'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n            ];\n\n            var requiredRulesFound = [];\n\n            // Loop over the list to check if they're defined on the field.\n            requiredRules.forEach(function (rule) {\n                if ('undefined' !== typeof this.constraintsByName[rule]) {\n                    requiredRulesFound.push(rule);\n                }\n            }, this);\n\n            // If there's not one required rule, return false\n            if (requiredRulesFound.length == 0)\n                return false;\n\n            // If parsley's on required rule was found\n            if (requiredRulesFound.indexOf('required') >= 0) {\n                // Check if the flag is set to true\n                return false !== this.constraintsByName.required.requirements;\n            }\n\n            return true;\n        }\n    });\n\n    var main = utils;\n\n    return main;\n\n}));\n","import jQuery from 'jquery';\n\n/**\n * Helper functions.\n */\nexport default {\n    parseArrayStringParameter: function (parameter) {\n        var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n        if (!m)\n            throw 'Requirement is not an array: \"' + parameter + '\"';\n\n        return m[1].replace(/\\'+/g, '').split(',');\n    },\n    /**\n     * This is used by various validation rules that rely on another input for validation.\n     *\n     * This function adds a 'change' event listener which forces the original to be validated again.\n     *\n     * @param rule              Name of the rule this change handler is for\n     * @param otherElement      Which element to bind this to\n     * @param element           The element which this bind request is coming from\n     * @param jQvalidator       The validator instance\n     * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n     */\n    bindChangeToOtherElement: function (rule, otherElement, element, jQvalidator, originalNotEmpty) {\n        var $elem = jQuery(otherElement);\n        var elData = $elem.data('larajqv-rules');\n\n        // None were added yet, initialise\n        if (elData === undefined) {\n            elData = [rule];\n            $elem.data('larajqv-rules', elData);\n        }\n        // Initialised, but not present\n        else if (elData.indexOf(rule) == -1) {\n            elData.push(rule);\n            $elem.data('larajqv-rules', elData);\n        }\n        // Already bound\n        else {\n            return;\n        }\n\n        // If not yet bound\n        $elem.on('change', function () {\n            if (originalNotEmpty === true && $elem.val() != '') {\n                jQvalidator.element('#'+jQuery(element).attr('id'));\n            }\n            else if (originalNotEmpty !== true) {\n                console.log(jQuery(element).attr('id'));\n                jQvalidator.element('#'+jQuery(element).attr('id'));\n            }\n        });\n    }\n};","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// The value should consist of letters\njQuery.validator.addMethod(\n    'alpha',\n    function(value, element, param){\n        return RegExp('/^[\\pL\\pM]+$/u').test(value);\n    },\n    'The value is in an invalid format.'\n);\n\n// THe value should consist of letters, dashes and underscores\njQuery.validator.addMethod(\n    'alphaDash',\n    function(value, element, param){\n        return RegExp('/^[\\pL\\pM\\pN_-]+$/u').test(value);\n    },\n    'This value is not acceptable.'\n);\n\n// THe value should be alpha numeric\njQuery.validator.addMethod(\n    'alphaNum',\n    function(value, element){\n        return RegExp('/^[\\pL\\pM\\pN]+$/u').test(value);\n    },\n    'A duplicate value has been selected.'\n);\n\n// Validate the value against a regex pattern\njQuery.validator.addMethod(\n    'regex',\n    function(value, element, param){\n        return RegExp(param).test(value);\n    },\n    'The value is in an invalid format.'\n);","// Check if the value is within a comma-separated list (val1,val2,..)\njQuery.validator.addMethod(\n    'in',\n    function(value, element, param){\n        var possibles = param.split(',');\n\n        return possibles.indexOf(value) > -1;\n    },\n    'The provided value is not present in the list.'\n);\n\n// Check if the value is not in a comma-separated list (val1,val2,..)\njQuery.validator.addMethod(\n    'notIn',\n    function(value, element, param){\n        var possibles = param.split(',');\n\n        return possibles.indexOf(value) == -1;\n    },\n    'The provided value is not present in the list.'\n);","import moment from 'moment';\nimport jQuery from 'jquery';\n\n// Valid date formats\njQuery.validator.setDefaults({\n    dateFormats: ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD']\n});\n\n// Check if the value is a date\njQuery.validator.addMethod('date', function (value, element, state) {\n    return moment(value, formatDatePhpToJs.getDateFormatsOption(this), true).isValid();\n}, 'You should provide a valid date.');\n\n\n// Check if the value is a date in a specific format\njQuery.validator.addMethod('dateFormat', function (value, element, parameter) {\n    return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n}, 'The date you entered is not in the right format (%s).');\n\n\n// Check if the value is a date before the specified date\njQuery.validator.addMethod('before', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n\n    var beforeDate = moment(parameter, dateFormats, true);\n\n    // If it's not a valid date, error\n    if (beforeDate === false)\n        return false;\n\n    return moment(value, dateFormats) < beforeDate;\n}, 'The date you entered should be before %s.');\n\n// Check if the value is a date before the specified date (from another input)\njQuery.validator.addMethod('beforeInput', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var beforeInput = jQuery(parameter);\n\n    // If we can't find the input, return true\n    if (beforeInput.length == 0)\n        return true;\n\n    var beforeVal = beforeInput.val();\n\n    // If the val is empty, return true\n    if (beforeVal == '')\n        return true;\n\n    var beforeDate = moment(beforeVal, dateFormats, true);\n\n    // If the before date isn't valid, error out\n    if (beforeDate.isValid() === false) {\n        console.warn(parameter + ' input does not contain a valid date');\n        return false;\n    }\n\n    var thisDate = moment(value, dateFormats, true);\n\n    // If the value's date isn't valid, error out\n    if (thisDate.isValid() === false) {\n        console.warn('the input being checked does not contain a valid date');\n        return false;\n    }\n\n    return thisDate < beforeDate;\n}, 'The date you entered should be before %s.');\n\n\n// Check if the value is a date before the specified date\njQuery.validator.addMethod('after', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var afterDate = moment(parameter, dateFormats, true);\n\n    // If it's not a valid date, error\n    if (afterDate === false)\n        return false;\n\n    return moment(value, dateFormats) > afterDate;\n}, 'The date you entered should be after %s.');\n\n// Check if the value is a date before the specified date (from another input)\njQuery.validator.addMethod('afterInput', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var afterInput = jQuery(parameter);\n\n    console.log(this, dateFormats);\n\n    // If we can't find the input, return true\n    if (afterInput.length == 0)\n        return true;\n\n    var afterVal = afterInput.val();\n\n    // If the val is empty, return true\n    if (afterVal == '')\n        return true;\n\n    var afterDate = moment(afterVal, dateFormats, true);\n\n    // If the after date isn't valid, error out\n    if (afterDate.isValid() === false) {\n        console.warn(parameter + ' input does not contain a valid date');\n        return false;\n    }\n\n    var thisDate = moment(value, dateFormats, true);\n\n    // If the value's date isn't valid, error out\n    if (thisDate.isValid() === false) {\n        console.warn('the input being checked does not contain a valid date');\n        return false;\n    }\n\n    return thisDate > afterDate;\n}, 'The date you entered should be after %s.');\n\n// convert PHP date format to moment JS date format\nvar formatDatePhpToJs = window.formatDatePhpToJs = {\n    mapChars: {\n        d: 'DD',\n        D: 'ddd',\n        j: 'D',\n        l: 'dddd',\n        N: 'E',\n        S: function () {\n            return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n        },\n        w: 'd',\n        z: function () {\n            return this.format('DDD', true) - 1;\n        },\n        W: 'W',\n        F: 'MMMM',\n        m: 'MM',\n        M: 'MMM',\n        n: 'M',\n        t: function () {\n            return this.daysInMonth();\n        },\n        L: function () {\n            return this.isLeapYear() ? 1 : 0;\n        },\n        o: 'GGGG',\n        Y: 'YYYY',\n        y: 'YY',\n        a: 'a',\n        A: 'A',\n        B: function () {\n            var thisUTC = this.clone().utc(),\n            // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n            return Math.floor(swatch * 1000 / 24);\n        },\n        g: 'h',\n        G: 'H',\n        h: 'hh',\n        H: 'HH',\n        i: 'mm',\n        s: 'ss',\n        u: '[u]', // not sure if moment has this\n        e: '[e]', // moment does not have this\n        I: function () {\n            return this.isDST() ? 1 : 0;\n        },\n        O: 'ZZ',\n        P: 'Z',\n        T: '[T]', // deprecated in moment\n        Z: function () {\n            return parseInt(this.format('ZZ', true), 10) * 36;\n        },\n        c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n        r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n        U: 'X'\n    },\n    formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n    convert: function (PHPDateFormat) {\n        return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n            return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n        })\n    },\n    getDateFormatsOption: function (jQvalidation) {\n        return jQvalidation.settings.dateFormats;\n    }\n}","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// THe value should be different from another input's value\njQuery.validator.addMethod(\n    'different',\n    function (value, element, param) {\n        console.log(param, element); \n        // Re-run validation if the other element's value changes\n        utils.bindChangeToOtherElement('different', param, element, this);\n\n        var otherValue = jQuery(param).val();\n\n        console.log(otherValue, value);\n\n        // If the other elem's empty or not the same return true\n        return otherValue == '' || otherValue != value;\n    },\n    'This value is not acceptable.'\n);\n\n// THe value should be distinct within its sibling checkboxes\njQuery.validator.addMethod(\n    'distinct',\n    function (value, element) {\n        // Only validate checkboxes\n        if (jQuery(element).attr('type') != 'checkbox')\n            return true;\n\n        // get checked inputs\n        var checkedInputs = $('input[name=\"' + jQuery(element).attr('name') + '\"]:checked');\n        var inputValues = [];\n        var allUnique = true;\n\n        if (checkedInputs.length > 0) {\n            checkedInputs.each(function () {\n                if (inputValues.indexOf($(this).val()) > -1) {\n                    allUnique = false;\n                }\n                inputValues.push($(this).val())\n            });\n        }\n\n        return allUnique;\n    },\n    'A duplicate value has been selected.'\n);\n\n// The value should be located in one of the checkbox's checked values\njQuery.validator.addMethod('inArray', function (value, element, otherFieldName) {\n    var thisElement = jQuery(element);\n\n    var values = [];\n\n    // Check if we're dealing with a text field\n    if (otherFieldName.substring(0, 1) == '#') {\n        // Bind a change event\n        utils.bindChangeToOtherElement('inArray', otherFieldName, element, this, true);\n\n        // If it's a text field we're assuming that it's a list of comma separated values\n        return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n    }\n\n    var self = this;\n    // Bind a change handler to the checkboxes\n    jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n        utils.bindChangeToOtherElement('inArray', this, element, self, true);\n    });\n\n    // Get the selected values of a checkbox by it's name\n    jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n        values.push(jQuery(this).val());\n    });\n\n    // Check if the value is in there\n    return values.indexOf(value) > -1;\n}, 'This value is incorrect.');","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// The value is required only if another input's value matched one of the defined ones.\n// the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\njQuery.validator.addMethod('requiredIf', function (value, element, parameters) {\n    // Normalise the parameters\n    var values = (jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Get the other input's selector\n    var field = values[0];\n\n    // Get the values it should contain to mark this one as required\n    parameters = values.slice(1);\n\n    // make sure that the other element get's a change event\n    utils.bindChangeToOtherElement('requiredIf', field, element, this);\n\n    // Only required to check if the value is empty\n    if (value.length == 0) {\n        var fieldValue = jQuery(field).val();\n\n        return parameters.indexOf(fieldValue) == -1;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if other field does not contain any of the specified values\n// the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\njQuery.validator.addMethod('requiredUnless', function (value, element, parameters) {\n    // Normalise the parameters\n    var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Get the other input's selector\n    var field = values[0];\n\n    // Get the values it should contain to mark this one as required\n    parameters = values.slice(1);\n\n    // make sure that the other element get's a change event\n    utils.bindChangeToOtherElement('requiredUnless', field, element, this);\n\n    // Only required to check if the value is empty\n    if (value.length == 0) {\n\n        var fieldValue = jQuery(field).val();\n\n        // It's not required if the input has one of the values\n        return parameters.indexOf(fieldValue) > -1;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if  any of the inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\njQuery.validator.addMethod('requiredWith', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AnyPresent = false;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWith', id, element, this);\n\n            // If the element is in the dom and has a value\n            if ($elem.length > 0 && $elem.val() != '') {\n                AnyPresent = true;\n            }\n        });\n\n        return !AnyPresent;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if all other inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\njQuery.validator.addMethod('requiredWithAll', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AllPresent = true;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWithAll', id, element, this);\n\n            // If the value isn't in the dom or is empty\n            if ($elem.length == 0 || $elem.val() == '') {\n                AllPresent = false;\n            }\n        });\n\n        return !AllPresent;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if any of the inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n\njQuery.validator.addMethod('requiredWithout', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AnyPresent = false;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWithAll', id, element, this);\n\n            if ($elem.length == 0 || $elem.val() == '') {\n                AnyPresent = true;\n            }\n        });\n\n        return AnyPresent;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if all other inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\njQuery.validator.addMethod('requiredWithoutAll', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AllEmpty = true;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWithAll', id, element, this);\n\n            if ($elem.length == 1 && $elem.val() != '') {\n                AllEmpty = false;\n            }\n        });\n\n        return AllEmpty;\n    }\n\n    return true;\n}, 'This field is required.');","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\nvar filesSizes = {\n    b: 1,\n    kb: 1024,\n    mb: 1024 * 1024,\n    gb: 1024 * 1024 * 1024,\n};\n\n// Make sure all files within the inputs are equal to or smaller than the defined size.\njQuery.validator.addMethod('fileSizeMax', function (value, element, params) {\n            var maxSize = params[0];\n            sizeMultiplyer = params[1].toLowerCase();\n            var files = element.files;\n\n            // Multiply the max file size\n            maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n            console.log(maxSize);\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    console.log(files[i].size);\n                    if (files[i].size > maxSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }, 'Your file(s) are too big.');\n\n\n// Make sure all files within the inputs are equal to or bigger than the defined size.\njQuery.validator.addMethod('fileSizeMin', function (value, element, params) {\n            var files = element.files;\n\n            // Multiply the min file size\n            var minSize = params[0] * filesSizes[params[1].toLowerCase()];\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (files[i].size < minSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }, 'Your file(s) should are too small.');\n\n\n// Make sure all files within the inputs are between the defined sizes.\njQuery.validator.addMethod('fileSizeBetween', function (value, element, params) {\n            var files = element.files;\n\n            // Multiply the file sizes\n            var minSize = params[0] * filesSizes[params[2].toLowerCase()];\n            var maxSize = params[1] * filesSizes[params[2].toLowerCase()];\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (files[i].size <= minSize || files[i].size >= maxSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }, 'Your file(s) should be between %s and %s %s.');\n\n\n// Make sure all files within the input are an image\njQuery.validator.addMethod('image', function (value, element, param) {\n            var files = element.files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (!files[i].type.match('image/*')) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }, 'This is not an image.');\n\n\n// Make sure all files within the input have one of the defined mimetypes\njQuery.validator.addMethod('fileMimetype', function (value, element, mimetypes) {\n            var allMimes = utils.parseArrayStringParameter(mimetypes);\n\n            var files = element.files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (allMimes.indexOf(files[i].type) == -1) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },'This file does not have the correct mimetype \"%s\".');\n\n\n// Make sure all files within the input have one of the defined extensions\njQuery.validator.addMethod('fileExt', function (value, element, extensions) {\n            var allExts = utils.parseArrayStringParameter(extensions);\n\n            var files = element.files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    var explodeNames = files[i].name.split('.');\n\n                    if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },'This file does not have the correct extensions.');\n\n// Make sure all images within the input have specific dimensions\njQuery.validator.addMethod('dimensions', function (value, element, param) {\n            var files = element.files;\n\n            // @todo redo this?\n            var options = (jQuery.isJSON(param)) ? param : JSON.parse(param);\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                var defer = jQuery.Deferred();\n                var _URL = window.URL || window.webkitURL;\n\n                var image = new Image;\n\n                // Validate once t he image is loaded\n                image.onload = function () {\n                    var width = this.width;\n                    var height = this.height;\n\n                    // Check min width, if defined\n                    if (typeof options.min_width != 'undefined') {\n                        if (width < options.min_width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check max width, if defined\n                    if (typeof options.max_width != 'undefined') {\n                        if (width > options.max_width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check min height, if defined\n                    if (typeof options.min_height != 'undefined') {\n                        if (height < options.min_height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check max height, if defined\n                    if (typeof options.max_height != 'undefined') {\n                        if (height > options.max_height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check width, if defined\n                    if (typeof options.width != 'undefined') {\n                        if (width != options.width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check height, if defined\n                    if (typeof options.height != 'undefined') {\n                        if (height != options.height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check ratio, if defined\n                    if (typeof options.ratio != 'undefined') {\n                        var splitRatio = options.ratio.split(':');\n                        if (splitRatio[0] / splitRatio[1] != width / height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    defer.resolve(image);\n                };\n\n                // On error, reject the promise\n                image.onerror = function () {\n                    console.warn('image load error');\n                    defer.reject();\n                }\n\n                image.src = _URL.createObjectURL(files[0]);\n\n                return defer.promise().then(function(image){\n                    // Clean up\n                    image = null;\n\n                    return true;\n                }, function(image){\n                    // Clean up\n                    image = null;\n\n                    return false;\n                });\n            }\n\n            return true;\n        });","import jQuery from 'jquery';\nimport './utils.js';\nimport './rules/string';\nimport './rules/ins';\nimport './rules/dates';\nimport './rules/comparison';\nimport './rules/requireds.js';\nimport './rules/files.js';\n\n/**\n * Overwrite core Parsley methods.\n *\n * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n */\nwindow.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n    // Normally this was intended Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n\n        var requiredRules = [\n            // This one comes out of the box with parsley\n            'required',\n\n            // These ones were added with this library\n            'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n        ];\n\n        var requiredRulesFound = [];\n\n        // Loop over the list to check if they're defined on the field.\n        requiredRules.forEach(function (rule) {\n            if ('undefined' !== typeof this.constraintsByName[rule]) {\n                requiredRulesFound.push(rule);\n            }\n        }, this);\n\n        // If there's not one required rule, return false\n        if (requiredRulesFound.length == 0)\n            return false;\n\n        // If parsley's on required rule was found\n        if (requiredRulesFound.indexOf('required') >= 0) {\n            // Check if the flag is set to true\n            return false !== this.constraintsByName.required.requirements;\n        }\n\n        return true;\n    }\n});\n\nexport default utils;"],"sourceRoot":"/source/"}