{"version":3,"sources":["/source/laravel-jQvalidation.js","/source/src/utils.js","/source/src/rules/string.js","/source/src/rules/ins.js","/source/src/rules/dates.js","/source/src/rules/comparison.js","/source/src/rules/requireds.js","/source/src/rules/files.js","/source/src/main.js"],"names":["global","factory","exports","module","require","define","amd","LjQv","jQuery","moment","this","utils","parseArrayStringParameter","parameter","m","match","replace","split","bindChangeToOtherElement","rule","otherElement","element","jQvalidator","originalNotEmpty","$elem","elData","data","undefined","indexOf","push","on","val","attr","promiseSuccess","validator","previous","previousValue","settings","messages","name","originalMessage","message","old","files","valid","submitted","formSubmitted","resetInternals","toHide","errorsFor","successList","invalid","showErrors","promiseError","console","log","errors","defaultMessage","method","parameters","addMethod","value","param","RegExp","test","possibles","setDefaults","dateFormats","state","formatDatePhpToJs","getDateFormatsOption","isValid","convert","beforeDate","beforeInput","length","beforeVal","warn","thisDate","afterDate","afterInput","afterVal","window","mapChars","d","D","j","l","N","S","format","w","z","W","F","M","n","t","daysInMonth","L","isLeapYear","o","Y","y","a","A","B","thisUTC","clone","utc","swatch","hours","minutes","seconds","Math","floor","g","G","h","H","i","s","u","e","I","isDST","O","P","T","Z","parseInt","c","r","U","formatEx","PHPDateFormat","phpStr","call","jQvalidation","otherValue","checkedInputs","$","inputValues","allUnique","each","otherFieldName","values","substring","self","isArray","field","slice","fieldValue","allElements","AnyPresent","forEach","id","AllPresent","AllEmpty","filesSizes","b","kb","mb","gb","params","maxSize","sizeMultiplyer","toLowerCase","trim","size","minSize","type","mimetypes","allMimes","extensions","allExts","explodeNames","ParsleyExtend","extend","_isRequired","requiredRules","requiredRulesFound","constraintsByName","required","requirements","main"],"mappings":"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","file":"laravel-jQvalidation.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery'), require('moment')) :\n    typeof define === 'function' && define.amd ? define(['jquery', 'moment'], factory) :\n    global.LjQv = factory(global.jQuery, global.moment)\n}(this, function (jQuery, moment) { 'use strict';\n\n    /**\n     * Helper functions.\n     */\n    var utils = {\n        parseArrayStringParameter: function (parameter) {\n            var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n            if (!m)\n                throw 'Requirement is not an array: \"' + parameter + '\"';\n\n            return m[1].replace(/\\'+/g, '').split(',');\n        },\n        /**\n         * This is used by various validation rules that rely on another input for validation.\n         *\n         * This function adds a 'change' event listener which forces the original to be validated again.\n         *\n         * @param rule              Name of the rule this change handler is for\n         * @param otherElement      Which element to bind this to\n         * @param element           The element which this bind request is coming from\n         * @param jQvalidator       The validator instance\n         * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n         */\n        bindChangeToOtherElement: function (rule, otherElement, element, jQvalidator, originalNotEmpty) {\n            var $elem = jQuery(otherElement);\n            var elData = $elem.data('larajqv-rules');\n\n            // None were added yet, initialise\n            if (elData === undefined) {\n                elData = [rule];\n                $elem.data('larajqv-rules', elData);\n            }\n            // Initialised, but not present\n            else if (elData.indexOf(rule) == -1) {\n                elData.push(rule);\n                $elem.data('larajqv-rules', elData);\n            }\n            // Already bound\n            else {\n                return;\n            }\n\n            // If not yet bound\n            $elem.on('change', function () {\n                if (originalNotEmpty === true && $elem.val() != '') {\n                    jQvalidator.element('#'+jQuery(element).attr('id'));\n                }\n                else if (originalNotEmpty !== true) {\n                    jQvalidator.element('#'+jQuery(element).attr('id'));\n                }\n            });\n        },\n\n        promiseSuccess : function(validator, element){\n            var previous = validator.previousValue( element, 'dimensions' );\n\n            if ( !validator.settings.messages[ element.name ] ) {\n                validator.settings.messages[ element.name ] = {};\n            }\n            previous.originalMessage = previous.originalMessage || validator.settings.messages[ element.name ][ 'dimensions' ];\n            validator.settings.messages[ element.name ][ 'dimensions' ] = previous.message;\n\n            if ( previous.old === element.files[0].name ) {\n                return previous.valid;\n            }\n\n            previous.old = element.files[0].name;\n\n            var submitted = validator.formSubmitted;\n            validator.resetInternals();\n            validator.toHide = validator.errorsFor( element );\n            validator.formSubmitted = submitted;\n            validator.successList.push( element );\n            validator.invalid[ element.name ] = false;\n            validator.showErrors();\n            previous.valid = true;\n        },\n        promiseError : function(validator, element) {\n            var previous = validator.previousValue( element, 'dimensions' );\n\n            if ( !validator.settings.messages[ element.name ] ) {\n                validator.settings.messages[ element.name ] = {};\n            }\n            previous.originalMessage = previous.originalMessage || validator.settings.messages[ element.name ][ 'dimensions' ];\n            validator.settings.messages[ element.name ][ 'dimensions' ] = previous.message;\n\n            if ( previous.old === element.files[0].name ) {\n                return previous.valid;\n            }\n\n            previous.old = element.files[0].name;\n            console.log(element);\n\n            var errors = {};\n            var message = validator.defaultMessage( element, { method: 'dimensions', parameters: [] } );\n            errors[ element.name ] = previous.message = message;\n            validator.invalid[ element.name ] = true;\n            validator.showErrors( errors );\n            previous.valid = false;\n        }\n    };\n\n    // The value should consist of letters\n    jQuery.validator.addMethod(\n        'alpha',\n        function(value, element, param){\n            return RegExp('/^[\\pL\\pM]+$/u').test(value);\n        },\n        'The value is in an invalid format.'\n    );\n\n    // THe value should consist of letters, dashes and underscores\n    jQuery.validator.addMethod(\n        'alphaDash',\n        function(value, element, param){\n            return RegExp('/^[\\pL\\pM\\pN_-]+$/u').test(value);\n        },\n        'This value is not acceptable.'\n    );\n\n    // THe value should be alpha numeric\n    jQuery.validator.addMethod(\n        'alphaNum',\n        function(value, element){\n            return RegExp('/^[\\pL\\pM\\pN]+$/u').test(value);\n        },\n        'A duplicate value has been selected.'\n    );\n\n    // Validate the value against a regex pattern\n    jQuery.validator.addMethod(\n        'regex',\n        function(value, element, param){\n            return RegExp(param).test(value);\n        },\n        'The value is in an invalid format.'\n    );\n\n    // Check if the value is within a comma-separated list (val1,val2,..)\n    jQuery.validator.addMethod(\n        'in',\n        function(value, element, param){\n            var possibles = param.split(',');\n\n            return possibles.indexOf(value) > -1;\n        },\n        'The provided value is not present in the list.'\n    );\n\n    // Check if the value is not in a comma-separated list (val1,val2,..)\n    jQuery.validator.addMethod(\n        'notIn',\n        function(value, element, param){\n            var possibles = param.split(',');\n\n            return possibles.indexOf(value) == -1;\n        },\n        'The provided value is not present in the list.'\n    );\n\n    // Valid date formats\n    jQuery.validator.setDefaults({\n        dateFormats: ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD']\n    });\n\n    // Check if the value is a date\n    jQuery.validator.addMethod('date', function (value, element, state) {\n        return moment(value, formatDatePhpToJs.getDateFormatsOption(this), true).isValid();\n    }, 'You should provide a valid date.');\n\n\n    // Check if the value is a date in a specific format\n    jQuery.validator.addMethod('dateFormat', function (value, element, parameter) {\n        return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n    }, 'The date you entered is not in the right format (%s).');\n\n\n    // Check if the value is a date before the specified date\n    jQuery.validator.addMethod('before', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n\n        var beforeDate = moment(parameter, dateFormats, true);\n\n        // If it's not a valid date, error\n        if (beforeDate === false)\n            return false;\n\n        return moment(value, dateFormats) < beforeDate;\n    }, 'The date you entered should be before %s.');\n\n    // Check if the value is a date before the specified date (from another input)\n    jQuery.validator.addMethod('beforeInput', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var beforeInput = jQuery(parameter);\n\n        // If we can't find the input, return true\n        if (beforeInput.length == 0)\n            return true;\n\n        var beforeVal = beforeInput.val();\n\n        // If the val is empty, return true\n        if (beforeVal == '')\n            return true;\n\n        var beforeDate = moment(beforeVal, dateFormats, true);\n\n        // If the before date isn't valid, error out\n        if (beforeDate.isValid() === false) {\n            console.warn(parameter + ' input does not contain a valid date');\n            return false;\n        }\n\n        var thisDate = moment(value, dateFormats, true);\n\n        // If the value's date isn't valid, error out\n        if (thisDate.isValid() === false) {\n            console.warn('the input being checked does not contain a valid date');\n            return false;\n        }\n\n        return thisDate < beforeDate;\n    }, 'The date you entered should be before %s.');\n\n\n    // Check if the value is a date before the specified date\n    jQuery.validator.addMethod('after', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var afterDate = moment(parameter, dateFormats, true);\n\n        // If it's not a valid date, error\n        if (afterDate === false)\n            return false;\n\n        return moment(value, dateFormats) > afterDate;\n    }, 'The date you entered should be after %s.');\n\n    // Check if the value is a date before the specified date (from another input)\n    jQuery.validator.addMethod('afterInput', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var afterInput = jQuery(parameter);\n\n        console.log(this, dateFormats);\n\n        // If we can't find the input, return true\n        if (afterInput.length == 0)\n            return true;\n\n        var afterVal = afterInput.val();\n\n        // If the val is empty, return true\n        if (afterVal == '')\n            return true;\n\n        var afterDate = moment(afterVal, dateFormats, true);\n\n        // If the after date isn't valid, error out\n        if (afterDate.isValid() === false) {\n            console.warn(parameter + ' input does not contain a valid date');\n            return false;\n        }\n\n        var thisDate = moment(value, dateFormats, true);\n\n        // If the value's date isn't valid, error out\n        if (thisDate.isValid() === false) {\n            console.warn('the input being checked does not contain a valid date');\n            return false;\n        }\n\n        return thisDate > afterDate;\n    }, 'The date you entered should be after %s.');\n\n    // convert PHP date format to moment JS date format\n    var formatDatePhpToJs = window.formatDatePhpToJs = {\n        mapChars: {\n            d: 'DD',\n            D: 'ddd',\n            j: 'D',\n            l: 'dddd',\n            N: 'E',\n            S: function () {\n                return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n            },\n            w: 'd',\n            z: function () {\n                return this.format('DDD', true) - 1;\n            },\n            W: 'W',\n            F: 'MMMM',\n            m: 'MM',\n            M: 'MMM',\n            n: 'M',\n            t: function () {\n                return this.daysInMonth();\n            },\n            L: function () {\n                return this.isLeapYear() ? 1 : 0;\n            },\n            o: 'GGGG',\n            Y: 'YYYY',\n            y: 'YY',\n            a: 'a',\n            A: 'A',\n            B: function () {\n                var thisUTC = this.clone().utc(),\n                // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                    swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n                return Math.floor(swatch * 1000 / 24);\n            },\n            g: 'h',\n            G: 'H',\n            h: 'hh',\n            H: 'HH',\n            i: 'mm',\n            s: 'ss',\n            u: '[u]', // not sure if moment has this\n            e: '[e]', // moment does not have this\n            I: function () {\n                return this.isDST() ? 1 : 0;\n            },\n            O: 'ZZ',\n            P: 'Z',\n            T: '[T]', // deprecated in moment\n            Z: function () {\n                return parseInt(this.format('ZZ', true), 10) * 36;\n            },\n            c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n            r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n            U: 'X'\n        },\n        formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n        convert: function (PHPDateFormat) {\n            return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n                return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n            })\n        },\n        getDateFormatsOption: function (jQvalidation) {\n            return jQvalidation.settings.dateFormats;\n        }\n    }\n\n    // THe value should be different from another input's value\n    jQuery.validator.addMethod(\n        'different',\n        function (value, element, param) {\n            // Re-run validation if the other element's value changes\n            utils.bindChangeToOtherElement('different', param, element, this);\n\n            var otherValue = jQuery(param).val();\n\n            // If the other elem's empty or not the same return true\n            return otherValue == '' || otherValue != value;\n        },\n        'This value is not acceptable.'\n    );\n\n    // THe value should be distinct within its sibling checkboxes\n    jQuery.validator.addMethod(\n        'distinct',\n        function (value, element) {\n            // Only validate checkboxes\n            if (jQuery(element).attr('type') != 'checkbox')\n                return true;\n\n            // get checked inputs\n            var checkedInputs = $('input[name=\"' + jQuery(element).attr('name') + '\"]:checked');\n            var inputValues = [];\n            var allUnique = true;\n\n            if (checkedInputs.length > 0) {\n                checkedInputs.each(function () {\n                    if (inputValues.indexOf($(this).val()) > -1) {\n                        allUnique = false;\n                    }\n                    inputValues.push($(this).val())\n                });\n            }\n\n            return allUnique;\n        },\n        'A duplicate value has been selected.'\n    );\n\n    // The value should be located in one of the checkbox's checked values\n    jQuery.validator.addMethod('inArray', function (value, element, otherFieldName) {\n        var thisElement = jQuery(element);\n\n        var values = [];\n\n        // Check if we're dealing with a text field\n        if (otherFieldName.substring(0, 1) == '#') {\n            // Bind a change event\n            utils.bindChangeToOtherElement('inArray', otherFieldName, element, this, true);\n\n            // If it's a text field we're assuming that it's a list of comma separated values\n            return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n        }\n\n        var self = this;\n        // Bind a change handler to the checkboxes\n        jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n            utils.bindChangeToOtherElement('inArray', this, element, self, true);\n        });\n\n        // Get the selected values of a checkbox by it's name\n        jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n            values.push(jQuery(this).val());\n        });\n\n        // Check if the value is in there\n        return values.indexOf(value) > -1;\n    }, 'This value is incorrect.');\n\n    // The value is required only if another input's value matched one of the defined ones.\n    // the parameter should be formatted as data-rule-requiredIf=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    jQuery.validator.addMethod('requiredIf', function (value, element, parameters) {\n        // Normalise the parameters\n        var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Get the other input's selector\n        var field = values[0];\n\n        // Get the values it should contain to mark this one as required\n        parameters = values.slice(1);\n\n        // make sure that the other element get's a change event\n        utils.bindChangeToOtherElement('requiredIf', field, element, this);\n\n        // Only required to check if the value is empty\n        if (value.length == 0) {\n            var fieldValue = jQuery(field).val();\n\n            return parameters.indexOf(fieldValue) == -1;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if other field does not contain any of the specified values\n    // the parameter should be formatted as data-rule-requiredUnless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    jQuery.validator.addMethod('requiredUnless', function (value, element, parameters) {\n        // Normalise the parameters\n        var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Get the other input's selector\n        var field = values[0];\n\n        // Get the values it should contain to mark this one as required\n        parameters = values.slice(1);\n\n        // make sure that the other element get's a change event\n        utils.bindChangeToOtherElement('requiredUnless', field, element, this);\n\n        // Only required to check if the value is empty\n        if (value.length == 0) {\n\n            var fieldValue = jQuery(field).val();\n\n            // It's not required if the input has one of the values\n            return parameters.indexOf(fieldValue) > -1;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if  any of the inputs are present in the dom\n    // the parameter should be formatted as data-rule-requiredWith=\"#elementValueToCheck,#elementValueToCheck,..\"\n    jQuery.validator.addMethod('requiredWith', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AnyPresent = false;\n            var self = this;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWith', id, element, self);\n\n                // If the element is in the dom and has a value\n                if ($elem.length > 0 && $elem.val() != '') {\n                    AnyPresent = true;\n                }\n            });\n\n            return !AnyPresent;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if all other inputs are present in the dom\n    // the parameter should be formatted as data-rule-requiredWithAll=\"#elementValueToCheck,#elementValueToCheck,..\"\n    jQuery.validator.addMethod('requiredWithAll', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AllPresent = true;\n            var self = this;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWithAll', id, element, self);\n\n                // If the value isn't in the dom or is empty\n                if ($elem.length == 0 || $elem.val() == '') {\n                    AllPresent = false;\n                }\n            });\n\n            return !AllPresent;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if any of the inputs are not present in the dom\n    // the parameter should be formatted as data-rule-requiredWith=\"#elementValueToCheck,#elementValueToCheck,..\"\n\n    jQuery.validator.addMethod('requiredWithout', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AnyPresent = false;\n            var self = this;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWithAll', id, element, self);\n\n                if ($elem.length == 0 || $elem.val() == '') {\n                    AnyPresent = true;\n                }\n            });\n\n            return !AnyPresent;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n\n    // The value is required if all other inputs are not empty\n    // the parameter should be formatted as data-rule-requiredWithAll=\"#elementValueToCheck,#elementValueToCheck,..\"\n    jQuery.validator.addMethod('requiredWithoutAll', function (value, element, parameters) {\n        // Normalise the parameters\n        var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n        // Only validate if the char count is 0\n        if (value.length == 0) {\n            var AllEmpty = true;\n            var self = this;\n\n            allElements.forEach(function (id) {\n                var $elem = jQuery(id);\n\n                // Check for changes on this other input\n                utils.bindChangeToOtherElement('requiredWithAll', id, element, self);\n\n                if ($elem.length == 1 && $elem.val() != '') {\n                    AllEmpty = false;\n                }\n            });\n\n            return AllEmpty;\n        }\n\n        return true;\n    }, 'This field is required.');\n\n    var filesSizes = {\n        b: 1,\n        kb: 1024,\n        mb: 1024 * 1024,\n        gb: 1024 * 1024 * 1024,\n    };\n\n    // Make sure all files within the inputs are equal to or smaller than the defined size.\n    jQuery.validator.addMethod('fileSizeMax', function (value, element, params) {\n        params = (jQuery.isArray(params)) ? params : utils.parseArrayStringParameter(params);\n        console.log(params);\n        var maxSize = params[0];\n        var sizeMultiplyer = params[1].toLowerCase().trim();\n        var files = element.files;\n\n        // Multiply the max file size\n        maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n        console.log(maxSize);\n\n        // If a file is present in the input\n        if (files.length > 0) {\n            // Loop over the files\n            for (var i = 0; i < files.length; i++) {\n                console.log(files[i].size);\n                if (files[i].size > maxSize) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }, 'Your file(s) are too big.');\n\n\n    // Make sure all files within the inputs are equal to or bigger than the defined size.\n    jQuery.validator.addMethod('fileSizeMin', function (value, element, params) {\n        params = (jQuery.isArray(params)) ? params : utils.parseArrayStringParameter(params);\n        var files = element.files;\n\n        // Multiply the min file size\n        var minSize = params[0] * filesSizes[params[1].toLowerCase().trim()];\n\n        // If a file is present in the input\n        if (files.length > 0) {\n            // Loop over the files\n            for (var i = 0; i < files.length; i++) {\n                if (files[i].size < minSize) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }, 'Your file(s) should are too small.');\n\n\n    // Make sure all files within the inputs are between the defined sizes.\n    jQuery.validator.addMethod('fileSizeBetween', function (value, element, params) {\n        params = (jQuery.isArray(params)) ? params : utils.parseArrayStringParameter(params);\n        var files = element.files;\n\n        // Multiply the file sizes\n        var minSize = params[0] * filesSizes[params[2].toLowerCase().trim()];\n        var maxSize = params[1] * filesSizes[params[2].toLowerCase().trim()];\n\n        // If a file is present in the input\n        if (files.length > 0) {\n            // Loop over the files\n            for (var i = 0; i < files.length; i++) {\n                if (files[i].size <= minSize || files[i].size >= maxSize) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }, 'Your file(s) should be between %s and %s %s.');\n\n\n    // Make sure all files within the input are an image\n    jQuery.validator.addMethod('image', function (value, element, param) {\n        var files = element.files;\n\n        // If a file is present in the input\n        if (files.length > 0) {\n            // Loop over the files\n            for (var i = 0; i < files.length; i++) {\n                if (!files[i].type.match('image/*')) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }, 'This is not an image.');\n\n\n    // Make sure all files within the input have one of the defined mimetypes\n    jQuery.validator.addMethod('fileMimetype', function (value, element, mimetypes) {\n        var allMimes = (jQuery.isArray(mimetypes)) ? mimetypes : utils.parseArrayStringParameter(mimetypes);\n\n        var files = element.files;\n\n        // If a file is present in the input\n        if (files.length > 0) {\n            // Loop over the files\n            for (var i = 0; i < files.length; i++) {\n                if (allMimes.indexOf(files[i].type) == -1) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }, 'This file does not have the correct mimetype \"%s\".');\n\n\n    // Make sure all files within the input have one of the defined extensions\n    jQuery.validator.addMethod('fileExt', function (value, element, extensions) {\n        var allExts = (jQuery.isArray(extensions)) ? extensions : utils.parseArrayStringParameter(extensions);\n\n        var files = element.files;\n\n        // If a file is present in the input\n        if (files.length > 0) {\n            // Loop over the files\n            for (var i = 0; i < files.length; i++) {\n                var explodeNames = files[i].name.split('.');\n\n                if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }, 'This file does not have the correct extensions.');\n\n    /**\n     * jQuery validation needs support for promises in order for this to work.\n     * \n    // Make sure all images within the input have specific dimensions\n    jQuery.validator.addMethod('dimensions', function (value, element, param) {\n        var files = element.files;\n        var validator = this;\n        var options = (typeof param == 'object') ? param : JSON.parse(param);\n        var method = 'dimensions';\n\n        var previous = this.previousValue(element, method),\n            validator, data, optionDataString;\n\n\n        // If a file is present in the input\n        if (files.length > 0) {\n\n            var defer = jQuery.Deferred();\n            var _URL = window.URL || window.webkitURL;\n\n            if (!this.settings.messages[element.name]) {\n                this.settings.messages[element.name] = {};\n            }\n\n            previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method];\n\n            this.settings.messages[element.name][method] = previous.message;\n\n            if (previous.old === _URL) {\n                return previous.valid;\n            }\n\n            this.startRequest(element);\n\n            var image = new Image;\n\n            // Validate once t he image is loaded\n            image.onload = function () {\n                var width = this.width;\n                var height = this.height;\n\n                // Check min width, if defined\n                if (typeof options.min_width != 'undefined') {\n                    if (width < Number(options.min_width)) {\n                        defer.reject(image, validator, element);\n                        return false;\n                    }\n                }\n\n                // Check max width, if defined\n                if (typeof options.max_width != 'undefined') {\n                    if (width > Number(options.max_width)) {\n                        defer.reject(image, validator, element);\n                        return true;\n                    }\n                }\n\n                // Check min height, if defined\n                if (typeof options.min_height != 'undefined') {\n                    if (height < Number(options.min_height)) {\n                        defer.reject(image, validator, element);\n                        return true;\n                    }\n                }\n\n                // Check max height, if defined\n                if (typeof options.max_height != 'undefined') {\n                    if (height > Number(options.max_height)) {\n                        defer.reject(image, validator, element);\n                        return true;\n                    }\n                }\n\n                // Check width, if defined\n                if (typeof options.width != 'undefined') {\n                    if (width != Number(options.width)) {\n                        defer.reject(image, validator, element);\n                        return true;\n                    }\n                }\n\n                // Check height, if defined\n                if (typeof options.height != 'undefined') {\n                    if (height != Number(options.height)) {\n                        defer.reject(image, validator, element);\n                        return true;\n                    }\n                }\n\n                // Check ratio, if defined\n                if (typeof options.ratio != 'undefined') {\n                    var splitRatio = options.ratio.split(':');\n                    if (splitRatio[0] / splitRatio[1] != width / height) {\n                        defer.reject(image, validator, element);\n                        return true;\n                    }\n                }\n\n                defer.resolve(image, validator, element);\n            };\n\n            // On error, reject the promise\n            image.onerror = function () {\n                console.warn('image load error');\n                defer.reject();\n            }\n\n            image.src = _URL.createObjectURL(files[0]);\n\n            defer.promise().then(function (image, validator, element) {\n                // Clean up\n                image = null;\n                var response = true;\n                var valid = true,\n                    errors, message, submitted;\n\n                validator.settings.messages[ element.name ][ method ] = previous.originalMessage;\n\n                console.log('success');\n                submitted = validator.formSubmitted;\n                validator.resetInternals();\n                validator.toHide = validator.errorsFor( element );\n                validator.formSubmitted = submitted;\n                validator.successList.push( element );\n                validator.invalid[ element.name ] = false;\n                validator.showErrors();\n                previous.valid = valid;\n                validator.stopRequest( element, valid );\n            }, function (image, validator, element) {\n                // Clean up\n                image = null;\n\n                var response = false;\n                var valid = response,\n                    errors, message, submitted;\n\n                validator.settings.messages[ element.name ][ method ] = previous.originalMessage;\n\n                console.log('error');\n                errors = {};\n                message = response || validator.defaultMessage( element, { method: method, parameters: value } );\n                errors[ element.name ] = previous.message = message;\n                validator.invalid[ element.name ] = true;\n                validator.showErrors( errors );\n                previous.valid = valid;\n                validator.stopRequest( element, valid );\n            });\n\n            console.log('pending');\n            return \"pending\";\n        }\n\n        return true;\n    });*/\n\n    /**\n     * Overwrite core Parsley methods.\n     *\n     * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n     */\n    window.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n        // Normally this was intended Internal only.\n        // Field is required if have required constraint without `false` value\n        _isRequired: function () {\n\n            var requiredRules = [\n                // This one comes out of the box with parsley\n                'required',\n\n                // These ones were added with this library\n                'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n            ];\n\n            var requiredRulesFound = [];\n\n            // Loop over the list to check if they're defined on the field.\n            requiredRules.forEach(function (rule) {\n                if ('undefined' !== typeof this.constraintsByName[rule]) {\n                    requiredRulesFound.push(rule);\n                }\n            }, this);\n\n            // If there's not one required rule, return false\n            if (requiredRulesFound.length == 0)\n                return false;\n\n            // If parsley's on required rule was found\n            if (requiredRulesFound.indexOf('required') >= 0) {\n                // Check if the flag is set to true\n                return false !== this.constraintsByName.required.requirements;\n            }\n\n            return true;\n        }\n    });\n\n    var main = utils;\n\n    return main;\n\n}));\n","import jQuery from 'jquery';\n\n/**\n * Helper functions.\n */\nexport default {\n    parseArrayStringParameter: function (parameter) {\n        var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n        if (!m)\n            throw 'Requirement is not an array: \"' + parameter + '\"';\n\n        return m[1].replace(/\\'+/g, '').split(',');\n    },\n    /**\n     * This is used by various validation rules that rely on another input for validation.\n     *\n     * This function adds a 'change' event listener which forces the original to be validated again.\n     *\n     * @param rule              Name of the rule this change handler is for\n     * @param otherElement      Which element to bind this to\n     * @param element           The element which this bind request is coming from\n     * @param jQvalidator       The validator instance\n     * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n     */\n    bindChangeToOtherElement: function (rule, otherElement, element, jQvalidator, originalNotEmpty) {\n        var $elem = jQuery(otherElement);\n        var elData = $elem.data('larajqv-rules');\n\n        // None were added yet, initialise\n        if (elData === undefined) {\n            elData = [rule];\n            $elem.data('larajqv-rules', elData);\n        }\n        // Initialised, but not present\n        else if (elData.indexOf(rule) == -1) {\n            elData.push(rule);\n            $elem.data('larajqv-rules', elData);\n        }\n        // Already bound\n        else {\n            return;\n        }\n\n        // If not yet bound\n        $elem.on('change', function () {\n            if (originalNotEmpty === true && $elem.val() != '') {\n                jQvalidator.element('#'+jQuery(element).attr('id'));\n            }\n            else if (originalNotEmpty !== true) {\n                jQvalidator.element('#'+jQuery(element).attr('id'));\n            }\n        });\n    },\n\n    promiseSuccess : function(validator, element){\n        var previous = validator.previousValue( element, 'dimensions' );\n\n        if ( !validator.settings.messages[ element.name ] ) {\n            validator.settings.messages[ element.name ] = {};\n        }\n        previous.originalMessage = previous.originalMessage || validator.settings.messages[ element.name ][ 'dimensions' ];\n        validator.settings.messages[ element.name ][ 'dimensions' ] = previous.message;\n\n        if ( previous.old === element.files[0].name ) {\n            return previous.valid;\n        }\n\n        previous.old = element.files[0].name;\n\n        var submitted = validator.formSubmitted;\n        validator.resetInternals();\n        validator.toHide = validator.errorsFor( element );\n        validator.formSubmitted = submitted;\n        validator.successList.push( element );\n        validator.invalid[ element.name ] = false;\n        validator.showErrors();\n        previous.valid = true;\n    },\n    promiseError : function(validator, element) {\n        var previous = validator.previousValue( element, 'dimensions' );\n\n        if ( !validator.settings.messages[ element.name ] ) {\n            validator.settings.messages[ element.name ] = {};\n        }\n        previous.originalMessage = previous.originalMessage || validator.settings.messages[ element.name ][ 'dimensions' ];\n        validator.settings.messages[ element.name ][ 'dimensions' ] = previous.message;\n\n        if ( previous.old === element.files[0].name ) {\n            return previous.valid;\n        }\n\n        previous.old = element.files[0].name;\n        console.log(element);\n\n        var errors = {};\n        var message = validator.defaultMessage( element, { method: 'dimensions', parameters: [] } );\n        errors[ element.name ] = previous.message = message;\n        validator.invalid[ element.name ] = true;\n        validator.showErrors( errors );\n        previous.valid = false;\n    }\n};","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// The value should consist of letters\njQuery.validator.addMethod(\n    'alpha',\n    function(value, element, param){\n        return RegExp('/^[\\pL\\pM]+$/u').test(value);\n    },\n    'The value is in an invalid format.'\n);\n\n// THe value should consist of letters, dashes and underscores\njQuery.validator.addMethod(\n    'alphaDash',\n    function(value, element, param){\n        return RegExp('/^[\\pL\\pM\\pN_-]+$/u').test(value);\n    },\n    'This value is not acceptable.'\n);\n\n// THe value should be alpha numeric\njQuery.validator.addMethod(\n    'alphaNum',\n    function(value, element){\n        return RegExp('/^[\\pL\\pM\\pN]+$/u').test(value);\n    },\n    'A duplicate value has been selected.'\n);\n\n// Validate the value against a regex pattern\njQuery.validator.addMethod(\n    'regex',\n    function(value, element, param){\n        return RegExp(param).test(value);\n    },\n    'The value is in an invalid format.'\n);","// Check if the value is within a comma-separated list (val1,val2,..)\njQuery.validator.addMethod(\n    'in',\n    function(value, element, param){\n        var possibles = param.split(',');\n\n        return possibles.indexOf(value) > -1;\n    },\n    'The provided value is not present in the list.'\n);\n\n// Check if the value is not in a comma-separated list (val1,val2,..)\njQuery.validator.addMethod(\n    'notIn',\n    function(value, element, param){\n        var possibles = param.split(',');\n\n        return possibles.indexOf(value) == -1;\n    },\n    'The provided value is not present in the list.'\n);","import moment from 'moment';\nimport jQuery from 'jquery';\n\n// Valid date formats\njQuery.validator.setDefaults({\n    dateFormats: ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD']\n});\n\n// Check if the value is a date\njQuery.validator.addMethod('date', function (value, element, state) {\n    return moment(value, formatDatePhpToJs.getDateFormatsOption(this), true).isValid();\n}, 'You should provide a valid date.');\n\n\n// Check if the value is a date in a specific format\njQuery.validator.addMethod('dateFormat', function (value, element, parameter) {\n    return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n}, 'The date you entered is not in the right format (%s).');\n\n\n// Check if the value is a date before the specified date\njQuery.validator.addMethod('before', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n\n    var beforeDate = moment(parameter, dateFormats, true);\n\n    // If it's not a valid date, error\n    if (beforeDate === false)\n        return false;\n\n    return moment(value, dateFormats) < beforeDate;\n}, 'The date you entered should be before %s.');\n\n// Check if the value is a date before the specified date (from another input)\njQuery.validator.addMethod('beforeInput', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var beforeInput = jQuery(parameter);\n\n    // If we can't find the input, return true\n    if (beforeInput.length == 0)\n        return true;\n\n    var beforeVal = beforeInput.val();\n\n    // If the val is empty, return true\n    if (beforeVal == '')\n        return true;\n\n    var beforeDate = moment(beforeVal, dateFormats, true);\n\n    // If the before date isn't valid, error out\n    if (beforeDate.isValid() === false) {\n        console.warn(parameter + ' input does not contain a valid date');\n        return false;\n    }\n\n    var thisDate = moment(value, dateFormats, true);\n\n    // If the value's date isn't valid, error out\n    if (thisDate.isValid() === false) {\n        console.warn('the input being checked does not contain a valid date');\n        return false;\n    }\n\n    return thisDate < beforeDate;\n}, 'The date you entered should be before %s.');\n\n\n// Check if the value is a date before the specified date\njQuery.validator.addMethod('after', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var afterDate = moment(parameter, dateFormats, true);\n\n    // If it's not a valid date, error\n    if (afterDate === false)\n        return false;\n\n    return moment(value, dateFormats) > afterDate;\n}, 'The date you entered should be after %s.');\n\n// Check if the value is a date before the specified date (from another input)\njQuery.validator.addMethod('afterInput', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var afterInput = jQuery(parameter);\n\n    console.log(this, dateFormats);\n\n    // If we can't find the input, return true\n    if (afterInput.length == 0)\n        return true;\n\n    var afterVal = afterInput.val();\n\n    // If the val is empty, return true\n    if (afterVal == '')\n        return true;\n\n    var afterDate = moment(afterVal, dateFormats, true);\n\n    // If the after date isn't valid, error out\n    if (afterDate.isValid() === false) {\n        console.warn(parameter + ' input does not contain a valid date');\n        return false;\n    }\n\n    var thisDate = moment(value, dateFormats, true);\n\n    // If the value's date isn't valid, error out\n    if (thisDate.isValid() === false) {\n        console.warn('the input being checked does not contain a valid date');\n        return false;\n    }\n\n    return thisDate > afterDate;\n}, 'The date you entered should be after %s.');\n\n// convert PHP date format to moment JS date format\nvar formatDatePhpToJs = window.formatDatePhpToJs = {\n    mapChars: {\n        d: 'DD',\n        D: 'ddd',\n        j: 'D',\n        l: 'dddd',\n        N: 'E',\n        S: function () {\n            return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n        },\n        w: 'd',\n        z: function () {\n            return this.format('DDD', true) - 1;\n        },\n        W: 'W',\n        F: 'MMMM',\n        m: 'MM',\n        M: 'MMM',\n        n: 'M',\n        t: function () {\n            return this.daysInMonth();\n        },\n        L: function () {\n            return this.isLeapYear() ? 1 : 0;\n        },\n        o: 'GGGG',\n        Y: 'YYYY',\n        y: 'YY',\n        a: 'a',\n        A: 'A',\n        B: function () {\n            var thisUTC = this.clone().utc(),\n            // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n            return Math.floor(swatch * 1000 / 24);\n        },\n        g: 'h',\n        G: 'H',\n        h: 'hh',\n        H: 'HH',\n        i: 'mm',\n        s: 'ss',\n        u: '[u]', // not sure if moment has this\n        e: '[e]', // moment does not have this\n        I: function () {\n            return this.isDST() ? 1 : 0;\n        },\n        O: 'ZZ',\n        P: 'Z',\n        T: '[T]', // deprecated in moment\n        Z: function () {\n            return parseInt(this.format('ZZ', true), 10) * 36;\n        },\n        c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n        r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n        U: 'X'\n    },\n    formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n    convert: function (PHPDateFormat) {\n        return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n            return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n        })\n    },\n    getDateFormatsOption: function (jQvalidation) {\n        return jQvalidation.settings.dateFormats;\n    }\n}","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// THe value should be different from another input's value\njQuery.validator.addMethod(\n    'different',\n    function (value, element, param) {\n        // Re-run validation if the other element's value changes\n        utils.bindChangeToOtherElement('different', param, element, this);\n\n        var otherValue = jQuery(param).val();\n\n        // If the other elem's empty or not the same return true\n        return otherValue == '' || otherValue != value;\n    },\n    'This value is not acceptable.'\n);\n\n// THe value should be distinct within its sibling checkboxes\njQuery.validator.addMethod(\n    'distinct',\n    function (value, element) {\n        // Only validate checkboxes\n        if (jQuery(element).attr('type') != 'checkbox')\n            return true;\n\n        // get checked inputs\n        var checkedInputs = $('input[name=\"' + jQuery(element).attr('name') + '\"]:checked');\n        var inputValues = [];\n        var allUnique = true;\n\n        if (checkedInputs.length > 0) {\n            checkedInputs.each(function () {\n                if (inputValues.indexOf($(this).val()) > -1) {\n                    allUnique = false;\n                }\n                inputValues.push($(this).val())\n            });\n        }\n\n        return allUnique;\n    },\n    'A duplicate value has been selected.'\n);\n\n// The value should be located in one of the checkbox's checked values\njQuery.validator.addMethod('inArray', function (value, element, otherFieldName) {\n    var thisElement = jQuery(element);\n\n    var values = [];\n\n    // Check if we're dealing with a text field\n    if (otherFieldName.substring(0, 1) == '#') {\n        // Bind a change event\n        utils.bindChangeToOtherElement('inArray', otherFieldName, element, this, true);\n\n        // If it's a text field we're assuming that it's a list of comma separated values\n        return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n    }\n\n    var self = this;\n    // Bind a change handler to the checkboxes\n    jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n        utils.bindChangeToOtherElement('inArray', this, element, self, true);\n    });\n\n    // Get the selected values of a checkbox by it's name\n    jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n        values.push(jQuery(this).val());\n    });\n\n    // Check if the value is in there\n    return values.indexOf(value) > -1;\n}, 'This value is incorrect.');","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// The value is required only if another input's value matched one of the defined ones.\n// the parameter should be formatted as data-rule-requiredIf=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\njQuery.validator.addMethod('requiredIf', function (value, element, parameters) {\n    // Normalise the parameters\n    var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Get the other input's selector\n    var field = values[0];\n\n    // Get the values it should contain to mark this one as required\n    parameters = values.slice(1);\n\n    // make sure that the other element get's a change event\n    utils.bindChangeToOtherElement('requiredIf', field, element, this);\n\n    // Only required to check if the value is empty\n    if (value.length == 0) {\n        var fieldValue = jQuery(field).val();\n\n        return parameters.indexOf(fieldValue) == -1;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if other field does not contain any of the specified values\n// the parameter should be formatted as data-rule-requiredUnless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\njQuery.validator.addMethod('requiredUnless', function (value, element, parameters) {\n    // Normalise the parameters\n    var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Get the other input's selector\n    var field = values[0];\n\n    // Get the values it should contain to mark this one as required\n    parameters = values.slice(1);\n\n    // make sure that the other element get's a change event\n    utils.bindChangeToOtherElement('requiredUnless', field, element, this);\n\n    // Only required to check if the value is empty\n    if (value.length == 0) {\n\n        var fieldValue = jQuery(field).val();\n\n        // It's not required if the input has one of the values\n        return parameters.indexOf(fieldValue) > -1;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if  any of the inputs are present in the dom\n// the parameter should be formatted as data-rule-requiredWith=\"#elementValueToCheck,#elementValueToCheck,..\"\njQuery.validator.addMethod('requiredWith', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AnyPresent = false;\n        var self = this;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWith', id, element, self);\n\n            // If the element is in the dom and has a value\n            if ($elem.length > 0 && $elem.val() != '') {\n                AnyPresent = true;\n            }\n        });\n\n        return !AnyPresent;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if all other inputs are present in the dom\n// the parameter should be formatted as data-rule-requiredWithAll=\"#elementValueToCheck,#elementValueToCheck,..\"\njQuery.validator.addMethod('requiredWithAll', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AllPresent = true;\n        var self = this;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWithAll', id, element, self);\n\n            // If the value isn't in the dom or is empty\n            if ($elem.length == 0 || $elem.val() == '') {\n                AllPresent = false;\n            }\n        });\n\n        return !AllPresent;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if any of the inputs are not present in the dom\n// the parameter should be formatted as data-rule-requiredWith=\"#elementValueToCheck,#elementValueToCheck,..\"\n\njQuery.validator.addMethod('requiredWithout', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AnyPresent = false;\n        var self = this;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWithAll', id, element, self);\n\n            if ($elem.length == 0 || $elem.val() == '') {\n                AnyPresent = true;\n            }\n        });\n\n        return !AnyPresent;\n    }\n\n    return true;\n}, 'This field is required.');\n\n\n// The value is required if all other inputs are not empty\n// the parameter should be formatted as data-rule-requiredWithAll=\"#elementValueToCheck,#elementValueToCheck,..\"\njQuery.validator.addMethod('requiredWithoutAll', function (value, element, parameters) {\n    // Normalise the parameters\n    var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n    // Only validate if the char count is 0\n    if (value.length == 0) {\n        var AllEmpty = true;\n        var self = this;\n\n        allElements.forEach(function (id) {\n            var $elem = jQuery(id);\n\n            // Check for changes on this other input\n            utils.bindChangeToOtherElement('requiredWithAll', id, element, self);\n\n            if ($elem.length == 1 && $elem.val() != '') {\n                AllEmpty = false;\n            }\n        });\n\n        return AllEmpty;\n    }\n\n    return true;\n}, 'This field is required.');","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\nvar filesSizes = {\n    b: 1,\n    kb: 1024,\n    mb: 1024 * 1024,\n    gb: 1024 * 1024 * 1024,\n};\n\n// Make sure all files within the inputs are equal to or smaller than the defined size.\njQuery.validator.addMethod('fileSizeMax', function (value, element, params) {\n    params = (jQuery.isArray(params)) ? params : utils.parseArrayStringParameter(params);\n    console.log(params);\n    var maxSize = params[0];\n    var sizeMultiplyer = params[1].toLowerCase().trim();\n    var files = element.files;\n\n    // Multiply the max file size\n    maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n    console.log(maxSize);\n\n    // If a file is present in the input\n    if (files.length > 0) {\n        // Loop over the files\n        for (var i = 0; i < files.length; i++) {\n            console.log(files[i].size);\n            if (files[i].size > maxSize) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}, 'Your file(s) are too big.');\n\n\n// Make sure all files within the inputs are equal to or bigger than the defined size.\njQuery.validator.addMethod('fileSizeMin', function (value, element, params) {\n    params = (jQuery.isArray(params)) ? params : utils.parseArrayStringParameter(params);\n    var files = element.files;\n\n    // Multiply the min file size\n    var minSize = params[0] * filesSizes[params[1].toLowerCase().trim()];\n\n    // If a file is present in the input\n    if (files.length > 0) {\n        // Loop over the files\n        for (var i = 0; i < files.length; i++) {\n            if (files[i].size < minSize) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}, 'Your file(s) should are too small.');\n\n\n// Make sure all files within the inputs are between the defined sizes.\njQuery.validator.addMethod('fileSizeBetween', function (value, element, params) {\n    params = (jQuery.isArray(params)) ? params : utils.parseArrayStringParameter(params);\n    var files = element.files;\n\n    // Multiply the file sizes\n    var minSize = params[0] * filesSizes[params[2].toLowerCase().trim()];\n    var maxSize = params[1] * filesSizes[params[2].toLowerCase().trim()];\n\n    // If a file is present in the input\n    if (files.length > 0) {\n        // Loop over the files\n        for (var i = 0; i < files.length; i++) {\n            if (files[i].size <= minSize || files[i].size >= maxSize) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}, 'Your file(s) should be between %s and %s %s.');\n\n\n// Make sure all files within the input are an image\njQuery.validator.addMethod('image', function (value, element, param) {\n    var files = element.files;\n\n    // If a file is present in the input\n    if (files.length > 0) {\n        // Loop over the files\n        for (var i = 0; i < files.length; i++) {\n            if (!files[i].type.match('image/*')) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}, 'This is not an image.');\n\n\n// Make sure all files within the input have one of the defined mimetypes\njQuery.validator.addMethod('fileMimetype', function (value, element, mimetypes) {\n    var allMimes = (jQuery.isArray(mimetypes)) ? mimetypes : utils.parseArrayStringParameter(mimetypes);\n\n    var files = element.files;\n\n    // If a file is present in the input\n    if (files.length > 0) {\n        // Loop over the files\n        for (var i = 0; i < files.length; i++) {\n            if (allMimes.indexOf(files[i].type) == -1) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}, 'This file does not have the correct mimetype \"%s\".');\n\n\n// Make sure all files within the input have one of the defined extensions\njQuery.validator.addMethod('fileExt', function (value, element, extensions) {\n    var allExts = (jQuery.isArray(extensions)) ? extensions : utils.parseArrayStringParameter(extensions);\n\n    var files = element.files;\n\n    // If a file is present in the input\n    if (files.length > 0) {\n        // Loop over the files\n        for (var i = 0; i < files.length; i++) {\n            var explodeNames = files[i].name.split('.');\n\n            if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}, 'This file does not have the correct extensions.');\n\n/**\n * jQuery validation needs support for promises in order for this to work.\n * \n// Make sure all images within the input have specific dimensions\njQuery.validator.addMethod('dimensions', function (value, element, param) {\n    var files = element.files;\n    var validator = this;\n    var options = (typeof param == 'object') ? param : JSON.parse(param);\n    var method = 'dimensions';\n\n    var previous = this.previousValue(element, method),\n        validator, data, optionDataString;\n\n\n    // If a file is present in the input\n    if (files.length > 0) {\n\n        var defer = jQuery.Deferred();\n        var _URL = window.URL || window.webkitURL;\n\n        if (!this.settings.messages[element.name]) {\n            this.settings.messages[element.name] = {};\n        }\n\n        previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method];\n\n        this.settings.messages[element.name][method] = previous.message;\n\n        if (previous.old === _URL) {\n            return previous.valid;\n        }\n\n        this.startRequest(element);\n\n        var image = new Image;\n\n        // Validate once t he image is loaded\n        image.onload = function () {\n            var width = this.width;\n            var height = this.height;\n\n            // Check min width, if defined\n            if (typeof options.min_width != 'undefined') {\n                if (width < Number(options.min_width)) {\n                    defer.reject(image, validator, element);\n                    return false;\n                }\n            }\n\n            // Check max width, if defined\n            if (typeof options.max_width != 'undefined') {\n                if (width > Number(options.max_width)) {\n                    defer.reject(image, validator, element);\n                    return true;\n                }\n            }\n\n            // Check min height, if defined\n            if (typeof options.min_height != 'undefined') {\n                if (height < Number(options.min_height)) {\n                    defer.reject(image, validator, element);\n                    return true;\n                }\n            }\n\n            // Check max height, if defined\n            if (typeof options.max_height != 'undefined') {\n                if (height > Number(options.max_height)) {\n                    defer.reject(image, validator, element);\n                    return true;\n                }\n            }\n\n            // Check width, if defined\n            if (typeof options.width != 'undefined') {\n                if (width != Number(options.width)) {\n                    defer.reject(image, validator, element);\n                    return true;\n                }\n            }\n\n            // Check height, if defined\n            if (typeof options.height != 'undefined') {\n                if (height != Number(options.height)) {\n                    defer.reject(image, validator, element);\n                    return true;\n                }\n            }\n\n            // Check ratio, if defined\n            if (typeof options.ratio != 'undefined') {\n                var splitRatio = options.ratio.split(':');\n                if (splitRatio[0] / splitRatio[1] != width / height) {\n                    defer.reject(image, validator, element);\n                    return true;\n                }\n            }\n\n            defer.resolve(image, validator, element);\n        };\n\n        // On error, reject the promise\n        image.onerror = function () {\n            console.warn('image load error');\n            defer.reject();\n        }\n\n        image.src = _URL.createObjectURL(files[0]);\n\n        defer.promise().then(function (image, validator, element) {\n            // Clean up\n            image = null;\n            var response = true;\n            var valid = true,\n                errors, message, submitted;\n\n            validator.settings.messages[ element.name ][ method ] = previous.originalMessage;\n\n            console.log('success');\n            submitted = validator.formSubmitted;\n            validator.resetInternals();\n            validator.toHide = validator.errorsFor( element );\n            validator.formSubmitted = submitted;\n            validator.successList.push( element );\n            validator.invalid[ element.name ] = false;\n            validator.showErrors();\n            previous.valid = valid;\n            validator.stopRequest( element, valid );\n        }, function (image, validator, element) {\n            // Clean up\n            image = null;\n\n            var response = false;\n            var valid = response,\n                errors, message, submitted;\n\n            validator.settings.messages[ element.name ][ method ] = previous.originalMessage;\n\n            console.log('error');\n            errors = {};\n            message = response || validator.defaultMessage( element, { method: method, parameters: value } );\n            errors[ element.name ] = previous.message = message;\n            validator.invalid[ element.name ] = true;\n            validator.showErrors( errors );\n            previous.valid = valid;\n            validator.stopRequest( element, valid );\n        });\n\n        console.log('pending');\n        return \"pending\";\n    }\n\n    return true;\n});*/","import jQuery from 'jquery';\nimport './utils.js';\nimport './rules/string';\nimport './rules/ins';\nimport './rules/dates';\nimport './rules/comparison';\nimport './rules/requireds.js';\nimport './rules/files.js';\n\n/**\n * Overwrite core Parsley methods.\n *\n * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n */\nwindow.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n    // Normally this was intended Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n\n        var requiredRules = [\n            // This one comes out of the box with parsley\n            'required',\n\n            // These ones were added with this library\n            'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n        ];\n\n        var requiredRulesFound = [];\n\n        // Loop over the list to check if they're defined on the field.\n        requiredRules.forEach(function (rule) {\n            if ('undefined' !== typeof this.constraintsByName[rule]) {\n                requiredRulesFound.push(rule);\n            }\n        }, this);\n\n        // If there's not one required rule, return false\n        if (requiredRulesFound.length == 0)\n            return false;\n\n        // If parsley's on required rule was found\n        if (requiredRulesFound.indexOf('required') >= 0) {\n            // Check if the flag is set to true\n            return false !== this.constraintsByName.required.requirements;\n        }\n\n        return true;\n    }\n});\n\nexport default utils;"],"sourceRoot":"/source/"}