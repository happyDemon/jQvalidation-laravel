{"version":3,"sources":["/source/laravel-jQvalidation.js","/source/src/rules/ins.js","/source/src/rules/dates.js","/source/src/utils.js","/source/src/rules/comparison.js","/source/src/rules/requireds.js","/source/src/rules/files.js","/source/src/main.js"],"names":["global","factory","exports","module","require","define","amd","LjQv","jQuery","moment","this","validator","addMethod","value","element","param","possibles","split","indexOf","setDefaults","dateFormats","state","formatDatePhpToJs","getDateFormatsOption","isValid","parameter","convert","beforeDate","beforeInput","length","beforeVal","val","console","warn","thisDate","afterDate","afterInput","log","afterVal","window","mapChars","d","D","j","l","N","S","format","replace","w","z","W","F","m","M","n","t","daysInMonth","L","isLeapYear","o","Y","y","a","A","B","thisUTC","clone","utc","swatch","hours","minutes","seconds","Math","floor","g","G","h","H","i","s","u","e","I","isDST","O","P","T","Z","parseInt","c","r","U","formatEx","PHPDateFormat","phpStr","call","jQvalidation","settings","utils","parseArrayStringParameter","match","bindChangeToOtherElement","rule","fieldInstance","originalNotEmpty","$elem","elData","data","undefined","push","on","$element","get","validate","RegExp","test","otherValue","attr","checkedInputs","$","inputValues","allUnique","each","Parsley","addValidator","requirementType","validateString","parameters","values","isArray","field","slice","fieldValue","messages","en","allElements","AnyPresent","forEach","id","AllPresent","AllEmpty","filesSizes","b","kb","mb","gb","maxSize","sizeMultiplyer","parsleyFieldInstance","toLowerCase","files","size","minSize","type","mimetypes","allMimes","extensions","allExts","explodeNames","name","","min_width","max_width","min_height","max_height","width","height","ratio","options","domOptions","dimensionsOptions","defer","Deferred","_URL","URL","webkitURL","image","Image","onload","reject","splitRatio","resolve","onerror","src","createObjectURL","promise","then","ParsleyExtend","extend","_isRequired","requiredRules","requiredRulesFound","constraintsByName","required","requirements","main"],"mappings":"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","file":"laravel-jQvalidation.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery'), require('moment')) :\n    typeof define === 'function' && define.amd ? define(['jquery', 'moment'], factory) :\n    global.LjQv = factory(global.jQuery, global.moment)\n}(this, function (jQuery, moment) { 'use strict';\n\n    // Check if the value is within a comma-separated list (val1,val2,..)\n    jQuery.validator.addMethod(\n        'in',\n        function(value, element, param){\n            var possibles = param.split(',');\n\n            return possibles.indexOf(value) > -1;\n        },\n        'The provided value is not present in the list.'\n    );\n\n    // Check if the value is not in a comma-separated list (val1,val2,..)\n    jQuery.validator.addMethod(\n        'notIn',\n        function(value, element, param){\n            var possibles = param.split(',');\n\n            return possibles.indexOf(value) == -1;\n        },\n        'The provided value is not present in the list.'\n    );\n\n    // Valid date formats\n    jQuery.validator.setDefaults({\n        dateFormats: ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD']\n    });\n\n    // Check if the value is a date\n    jQuery.validator.addMethod('date', function (value, element, state) {\n        return moment(value, formatDatePhpToJs.getDateFormatsOption(this), true).isValid();\n    }, 'You should provide a valid date.');\n\n\n    // Check if the value is a date in a specific format\n    jQuery.validator.addMethod('dateFormat', function (value, element, parameter) {\n        return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n    }, 'The date you entered is not in the right format (%s).');\n\n\n    // Check if the value is a date before the specified date\n    jQuery.validator.addMethod('before', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n\n        var beforeDate = moment(parameter, dateFormats, true);\n\n        // If it's not a valid date, error\n        if (beforeDate === false)\n            return false;\n\n        return moment(value, dateFormats) < beforeDate;\n    }, 'The date you entered should be before %s.');\n\n    // Check if the value is a date before the specified date (from another input)\n    jQuery.validator.addMethod('beforeInput', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var beforeInput = jQuery(parameter);\n\n        // If we can't find the input, return true\n        if (beforeInput.length == 0)\n            return true;\n\n        var beforeVal = beforeInput.val();\n\n        // If the val is empty, return true\n        if (beforeVal == '')\n            return true;\n\n        var beforeDate = moment(beforeVal, dateFormats, true);\n\n        // If the before date isn't valid, error out\n        if (beforeDate.isValid() === false) {\n            console.warn(parameter + ' input does not contain a valid date');\n            return false;\n        }\n\n        var thisDate = moment(value, dateFormats, true);\n\n        // If the value's date isn't valid, error out\n        if (thisDate.isValid() === false) {\n            console.warn('the input being checked does not contain a valid date');\n            return false;\n        }\n\n        return thisDate < beforeDate;\n    }, 'The date you entered should be before %s.');\n\n\n    // Check if the value is a date before the specified date\n    jQuery.validator.addMethod('after', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var afterDate = moment(parameter, dateFormats, true);\n\n        // If it's not a valid date, error\n        if (afterDate === false)\n            return false;\n\n        return moment(value, dateFormats) > afterDate;\n    }, 'The date you entered should be after %s.');\n\n    // Check if the value is a date before the specified date (from another input)\n    jQuery.validator.addMethod('afterInput', function (value, element, parameter) {\n        var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n        var afterInput = jQuery(parameter);\n\n        console.log(this, dateFormats);\n\n        // If we can't find the input, return true\n        if (afterInput.length == 0)\n            return true;\n\n        var afterVal = afterInput.val();\n\n        // If the val is empty, return true\n        if (afterVal == '')\n            return true;\n\n        var afterDate = moment(afterVal, dateFormats, true);\n\n        // If the after date isn't valid, error out\n        if (afterDate.isValid() === false) {\n            console.warn(parameter + ' input does not contain a valid date');\n            return false;\n        }\n\n        var thisDate = moment(value, dateFormats, true);\n\n        // If the value's date isn't valid, error out\n        if (thisDate.isValid() === false) {\n            console.warn('the input being checked does not contain a valid date');\n            return false;\n        }\n\n        return thisDate > afterDate;\n    }, 'The date you entered should be after %s.');\n\n    // convert PHP date format to moment JS date format\n    var formatDatePhpToJs = window.formatDatePhpToJs = {\n        mapChars: {\n            d: 'DD',\n            D: 'ddd',\n            j: 'D',\n            l: 'dddd',\n            N: 'E',\n            S: function () {\n                return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n            },\n            w: 'd',\n            z: function () {\n                return this.format('DDD', true) - 1;\n            },\n            W: 'W',\n            F: 'MMMM',\n            m: 'MM',\n            M: 'MMM',\n            n: 'M',\n            t: function () {\n                return this.daysInMonth();\n            },\n            L: function () {\n                return this.isLeapYear() ? 1 : 0;\n            },\n            o: 'GGGG',\n            Y: 'YYYY',\n            y: 'YY',\n            a: 'a',\n            A: 'A',\n            B: function () {\n                var thisUTC = this.clone().utc(),\n                // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                    swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n                return Math.floor(swatch * 1000 / 24);\n            },\n            g: 'h',\n            G: 'H',\n            h: 'hh',\n            H: 'HH',\n            i: 'mm',\n            s: 'ss',\n            u: '[u]', // not sure if moment has this\n            e: '[e]', // moment does not have this\n            I: function () {\n                return this.isDST() ? 1 : 0;\n            },\n            O: 'ZZ',\n            P: 'Z',\n            T: '[T]', // deprecated in moment\n            Z: function () {\n                return parseInt(this.format('ZZ', true), 10) * 36;\n            },\n            c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n            r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n            U: 'X'\n        },\n        formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n        convert: function (PHPDateFormat) {\n            return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n                return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n            })\n        },\n        getDateFormatsOption: function (jQvalidation) {\n            return jQvalidation.settings.dateFormats;\n        }\n    }\n\n    /**\n     * Helper functions.\n     *\n     * @type {{parseArrayStringParameter: larapars.parseArrayStringParameter, bindChangeToOtherElement: larapars.bindChangeToOtherElement, getDateFormatsOption: larapars.getDateFormatsOption}}\n     */\n    var utils = {\n        parseArrayStringParameter: function (parameter) {\n            var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n            if (!m)\n                throw 'Requirement is not an array: \"' + parameter + '\"';\n\n            return m[1].replace(/\\'+/g, '').split(',');\n        },\n        /**\n         * This is used by various validation rules that rely on another input for validation.\n         *\n         * This function adds a 'change' event listener which forces the original to be validated again.\n         *\n         * @param rule              Name of the rule this change handler is for\n         * @param element           Which element to bind this to\n         * @param fieldInstance     The ParsleyFieldInstance we can call validate() on\n         * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n         */\n        bindChangeToOtherElement: function (rule, element, fieldInstance, originalNotEmpty) {\n            var $elem = jQuery(element);\n            var elData = $elem.data('larajqv-rules');\n\n            // None were added yet, initialise\n            if (elData === undefined) {\n                elData = [rule];\n                $elem.data('larajqv-rules', elData);\n            }\n            // Initialised, but not present\n            else if (elData.indexOf(rule) == -1) {\n                elData.push(rule);\n                $elem.data('larajqv-rules', elData);\n            }\n            // Already bound\n            else {\n                return;\n            }\n\n            // If not yet bound\n            $elem.on('change', function () {\n                if (originalNotEmpty === true && jQuery(fieldInstance.$element.get(0)).val() != '') {\n                    fieldInstance.validate();\n                }\n                else if (originalNotEmpty !== true) {\n                    fieldInstance.validate();\n                }\n            });\n        }\n    };\n\n    // Validate the value against a regex pattern\n    jQuery.validator.addMethod(\n        'regex',\n        function(value, element, param){\n            return RegExp(param).test(value);\n        },\n        'The value is in an invalid format.'\n    );\n\n    // THe value should be different from another input's value\n    jQuery.validator.addMethod(\n        'different',\n        function(value, element, param){\n\n            var otherValue = jQuery(param).val();\n\n            return otherValue == '' || otherValue != value;\n        },\n        'This value is not acceptable.'\n    );\n\n    // THe value should be distinct within its sibling checkboxes\n    jQuery.validator.addMethod(\n        'distinct',\n        function(value, element){\n            // Only validate checkboxes\n            if(jQuery(element).attr('type') != 'checkbox')\n                return true;\n\n            // get checked inputs\n            var checkedInputs = $('input[name=\"'+jQuery(element).attr('name')+'\"]:checked');\n            var inputValues = [];\n            var allUnique = true;\n\n            if(checkedInputs.length > 0)\n            {\n                checkedInputs.each(function(){\n                    if(inputValues.indexOf($(this).val()) > -1)\n                    {\n                        allUnique = false;\n                    }\n                    inputValues.push($(this).val())\n                });\n            }\n\n            return allUnique;\n        },\n        'A duplicate value has been selected.'\n    );\n\n    // The value is required only if another input's value matched one of the defined ones.\n    // the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    window.Parsley\n        .addValidator('requiredIf', {\n            requirementType: 'string',\n            validateString: function (value, element, parameters, fieldInstance) {\n                // Normalise the parameters\n                var values = (jQuery.isArray(parameters)) ?  utils.parseArrayStringParameter(parameters) : parameters;\n\n                // Get the other input's selector\n                var field = values[0];\n\n                // Get the values it should contain to mark this one as required\n                parameters = values.slice(1);\n\n                // make sure that the other element get's a change event\n                utils.bindChangeToOtherElement('requiredIf', field, fieldInstance);\n\n                // Only required to check if the value is empty\n                if (value.length == 0) {\n                    var fieldValue = jQuery(field).val();\n\n                    return parameters.indexOf(fieldValue) == -1;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if other field does not contain any of the specified values\n    // the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    window.Parsley\n        .addValidator('requiredUnless', {\n            requirementType: 'string',\n            validateString: function (value, element, parameters, fieldInstance) {\n                // Normalise the parameters\n                var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n                // Get the other input's selector\n                var field = values[0];\n\n                // Get the values it should contain to mark this one as required\n                parameters = values.slice(1);\n\n                // make sure that the other element get's a change event\n                utils.bindChangeToOtherElement('requiredUnless', field, fieldInstance);\n\n                // Only required to check if the value is empty\n                if (value.length == 0) {\n\n                    var fieldValue = jQuery(field).val();\n\n                    // It's not required if the input has one of the values\n                    return parameters.indexOf(fieldValue) > -1;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if  any of the inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWith', {\n            requirementType: 'string',\n            validateString: function (value, element, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AnyPresent = false;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWith', id, fieldInstance);\n\n                        // If the element is in the dom and has a value\n                        if ($elem.length > 0 && $elem.val() != '') {\n                            AnyPresent = true;\n                        }\n                    });\n\n                    return !AnyPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if all other inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithAll', {\n            requirementType: 'string',\n            validateString: function (value, element, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AllPresent = true;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        // If the value isn't in the dom or is empty\n                        if ($elem.length == 0 || $elem.val() == '') {\n                            AllPresent = false;\n                        }\n                    });\n\n                    return !AllPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if any of the inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithout', {\n            requirementType: 'string',\n            validateString: function (value, element, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AnyPresent = false;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        if ($elem.length == 0 || $elem.val() == '') {\n                            AnyPresent = true;\n                        }\n                    });\n\n                    return AnyPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if all other inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithoutAll', {\n            requirementType: 'string',\n            validateString: function (value, element, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AllEmpty = true;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        if ($elem.length == 1  && $elem.val() != '') {\n                            AllEmpty = false;\n                        }\n                    });\n\n                    return AllEmpty;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n    var filesSizes = {\n        b: 1,\n        kb: 1024,\n        mb: 1024 * 1024,\n        gb: 1024 * 1024 * 1024,\n    };\n\n    // Make sure all files within the inputs are equal to or smaller than the defined size.\n    window.Parsley\n        .addValidator('fileSizeMax', {\n            requirementType: ['integer', 'string'],\n            validateString: function (value, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n                sizeMultiplyer = sizeMultiplyer.toLowerCase();\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // Multiply the max file size\n                maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n                console.log(maxSize);\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        console.log(files[i].size);\n                        if (files[i].size > maxSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'Your file(s) are too big.'\n            }\n        });\n\n\n    // Make sure all files within the inputs are equal to or bigger than the defined size.\n    window.Parsley\n        .addValidator('fileSizeMin', {\n            requirementType: ['integer', 'string'],\n            validateString: function (value, minSize, sizeMultiplyer, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // Multiply the min file size\n                minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (files[i].size < minSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'Your file(s) should are too small.'\n            }\n        });\n\n\n    // Make sure all files within the inputs are between the defined sizes.\n    window.Parsley\n        .addValidator('fileSizeBetween', {\n            requirementType: ['integer', 'integer', 'string'],\n            validateString: function (value, minSize, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // Multiply the file sizes\n                minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n                maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (files[i].size <= minSize || files[i].size >= maxSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'Your file(s) should be between %s and %s %s.'\n            }\n        });\n\n\n    // Make sure all files within the input are an image\n    window.Parsley\n        .addValidator('image', {\n            validateString: function (value, param, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (!files[i].type.match('image/*')) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This is not an image.'\n            }\n        });\n\n\n    // Make sure all files within the input have one of the defined mimetypes\n    window.Parsley\n        .addValidator('fileMimetype', {\n            requirementType: 'string',\n            validateString: function (value, mimetypes, parsleyFieldInstance) {\n                var allMimes = utils.parseArrayStringParameter(mimetypes);\n\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (allMimes.indexOf(files[i].type) == -1) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This file does not have the correct mimetype \"%s\".'\n            }\n        });\n\n\n    // Make sure all files within the input have one of the defined extensions\n    window.Parsley\n        .addValidator('fileExt', {\n            requirementType: 'string',\n            validateString: function (value, extensions, parsleyFieldInstance) {\n                var allExts = utils.parseArrayStringParameter(extensions);\n\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        var explodeNames = files[i].name.split('.');\n\n                        if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This file does not have the correct extensions.'\n            }\n        });\n\n    // Make sure all images within the input have specific dimensions\n    window.Parsley\n        .addValidator('dimensions', {\n            requirementType: {\n                '': 'boolean',\n                min_width: 'number', // Specify the minimum width the image should have\n                max_width: 'number', // Specify the maximum width the image should have\n                min_height: 'number', // Specify the minimum height the image should have\n                max_height: 'number', // Specify the maximum height the image should have\n                width: 'number', // Specify the  width the image should have\n                height: 'number', // Specify the height the image should have\n                ratio: 'string', // Specify the ratio the image should have\n            },\n            validateString: function (value, param, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                var options = parsleyFieldInstance.domOptions.dimensionsOptions;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    var defer = jQuery.Deferred();\n                    var _URL = window.URL || window.webkitURL;\n\n                    var image = new Image;\n\n                    // Validate once t he image is loaded\n                    image.onload = function () {\n                        var width = this.width;\n                        var height = this.height;\n\n                        // Check min width, if defined\n                        if (typeof options.min_width != 'undefined') {\n                            if (width < options.min_width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check max width, if defined\n                        if (typeof options.max_width != 'undefined') {\n                            if (width > options.max_width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check min height, if defined\n                        if (typeof options.min_height != 'undefined') {\n                            if (height < options.min_height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check max height, if defined\n                        if (typeof options.max_height != 'undefined') {\n                            if (height > options.max_height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check width, if defined\n                        if (typeof options.width != 'undefined') {\n                            if (width != options.width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check height, if defined\n                        if (typeof options.height != 'undefined') {\n                            if (height != options.height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check ratio, if defined\n                        if (typeof options.ratio != 'undefined') {\n                            var splitRatio = options.ratio.split(':');\n                            if (splitRatio[0] / splitRatio[1] != width / height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        defer.resolve(image);\n                    };\n\n                    // On error, reject the promise\n                    image.onerror = function () {\n                        console.warn('image load error');\n                        defer.reject();\n                    }\n\n                    image.src = _URL.createObjectURL(files[0]);\n\n                    return defer.promise().then(function(image){\n                        // Clean up\n                        image = null;\n\n                        return true;\n                    }, function(image){\n                        // Clean up\n                        image = null;\n\n                        return false;\n                    });\n                }\n\n                return true;\n            }\n        });\n\n    /**\n     * Overwrite core Parsley methods.\n     *\n     * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n     */\n    window.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n        // Normally this was intended Internal only.\n        // Field is required if have required constraint without `false` value\n        _isRequired: function () {\n\n            var requiredRules = [\n                // This one comes out of the box with parsley\n                'required',\n\n                // These ones were added with this library\n                'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n            ];\n\n            var requiredRulesFound = [];\n\n            // Loop over the list to check if they're defined on the field.\n            requiredRules.forEach(function (rule) {\n                if ('undefined' !== typeof this.constraintsByName[rule]) {\n                    requiredRulesFound.push(rule);\n                }\n            }, this);\n\n            // If there's not one required rule, return false\n            if (requiredRulesFound.length == 0)\n                return false;\n\n            // If parsley's on required rule was found\n            if (requiredRulesFound.indexOf('required') >= 0) {\n                // Check if the flag is set to true\n                return false !== this.constraintsByName.required.requirements;\n            }\n\n            return true;\n        }\n    });\n\n    var main = utils;\n\n    return main;\n\n}));\n","// Check if the value is within a comma-separated list (val1,val2,..)\njQuery.validator.addMethod(\n    'in',\n    function(value, element, param){\n        var possibles = param.split(',');\n\n        return possibles.indexOf(value) > -1;\n    },\n    'The provided value is not present in the list.'\n);\n\n// Check if the value is not in a comma-separated list (val1,val2,..)\njQuery.validator.addMethod(\n    'notIn',\n    function(value, element, param){\n        var possibles = param.split(',');\n\n        return possibles.indexOf(value) == -1;\n    },\n    'The provided value is not present in the list.'\n);","import moment from 'moment';\nimport jQuery from 'jquery';\n\n// Valid date formats\njQuery.validator.setDefaults({\n    dateFormats: ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD']\n});\n\n// Check if the value is a date\njQuery.validator.addMethod('date', function (value, element, state) {\n    return moment(value, formatDatePhpToJs.getDateFormatsOption(this), true).isValid();\n}, 'You should provide a valid date.');\n\n\n// Check if the value is a date in a specific format\njQuery.validator.addMethod('dateFormat', function (value, element, parameter) {\n    return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n}, 'The date you entered is not in the right format (%s).');\n\n\n// Check if the value is a date before the specified date\njQuery.validator.addMethod('before', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n\n    var beforeDate = moment(parameter, dateFormats, true);\n\n    // If it's not a valid date, error\n    if (beforeDate === false)\n        return false;\n\n    return moment(value, dateFormats) < beforeDate;\n}, 'The date you entered should be before %s.');\n\n// Check if the value is a date before the specified date (from another input)\njQuery.validator.addMethod('beforeInput', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var beforeInput = jQuery(parameter);\n\n    // If we can't find the input, return true\n    if (beforeInput.length == 0)\n        return true;\n\n    var beforeVal = beforeInput.val();\n\n    // If the val is empty, return true\n    if (beforeVal == '')\n        return true;\n\n    var beforeDate = moment(beforeVal, dateFormats, true);\n\n    // If the before date isn't valid, error out\n    if (beforeDate.isValid() === false) {\n        console.warn(parameter + ' input does not contain a valid date');\n        return false;\n    }\n\n    var thisDate = moment(value, dateFormats, true);\n\n    // If the value's date isn't valid, error out\n    if (thisDate.isValid() === false) {\n        console.warn('the input being checked does not contain a valid date');\n        return false;\n    }\n\n    return thisDate < beforeDate;\n}, 'The date you entered should be before %s.');\n\n\n// Check if the value is a date before the specified date\njQuery.validator.addMethod('after', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var afterDate = moment(parameter, dateFormats, true);\n\n    // If it's not a valid date, error\n    if (afterDate === false)\n        return false;\n\n    return moment(value, dateFormats) > afterDate;\n}, 'The date you entered should be after %s.');\n\n// Check if the value is a date before the specified date (from another input)\njQuery.validator.addMethod('afterInput', function (value, element, parameter) {\n    var dateFormats = formatDatePhpToJs.getDateFormatsOption(this);\n    var afterInput = jQuery(parameter);\n\n    console.log(this, dateFormats);\n\n    // If we can't find the input, return true\n    if (afterInput.length == 0)\n        return true;\n\n    var afterVal = afterInput.val();\n\n    // If the val is empty, return true\n    if (afterVal == '')\n        return true;\n\n    var afterDate = moment(afterVal, dateFormats, true);\n\n    // If the after date isn't valid, error out\n    if (afterDate.isValid() === false) {\n        console.warn(parameter + ' input does not contain a valid date');\n        return false;\n    }\n\n    var thisDate = moment(value, dateFormats, true);\n\n    // If the value's date isn't valid, error out\n    if (thisDate.isValid() === false) {\n        console.warn('the input being checked does not contain a valid date');\n        return false;\n    }\n\n    return thisDate > afterDate;\n}, 'The date you entered should be after %s.');\n\n// convert PHP date format to moment JS date format\nvar formatDatePhpToJs = window.formatDatePhpToJs = {\n    mapChars: {\n        d: 'DD',\n        D: 'ddd',\n        j: 'D',\n        l: 'dddd',\n        N: 'E',\n        S: function () {\n            return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n        },\n        w: 'd',\n        z: function () {\n            return this.format('DDD', true) - 1;\n        },\n        W: 'W',\n        F: 'MMMM',\n        m: 'MM',\n        M: 'MMM',\n        n: 'M',\n        t: function () {\n            return this.daysInMonth();\n        },\n        L: function () {\n            return this.isLeapYear() ? 1 : 0;\n        },\n        o: 'GGGG',\n        Y: 'YYYY',\n        y: 'YY',\n        a: 'a',\n        A: 'A',\n        B: function () {\n            var thisUTC = this.clone().utc(),\n            // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n            return Math.floor(swatch * 1000 / 24);\n        },\n        g: 'h',\n        G: 'H',\n        h: 'hh',\n        H: 'HH',\n        i: 'mm',\n        s: 'ss',\n        u: '[u]', // not sure if moment has this\n        e: '[e]', // moment does not have this\n        I: function () {\n            return this.isDST() ? 1 : 0;\n        },\n        O: 'ZZ',\n        P: 'Z',\n        T: '[T]', // deprecated in moment\n        Z: function () {\n            return parseInt(this.format('ZZ', true), 10) * 36;\n        },\n        c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n        r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n        U: 'X'\n    },\n    formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n    convert: function (PHPDateFormat) {\n        return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n            return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n        })\n    },\n    getDateFormatsOption: function (jQvalidation) {\n        return jQvalidation.settings.dateFormats;\n    }\n}","import jQuery from 'jquery';\n\n/**\n * Helper functions.\n *\n * @type {{parseArrayStringParameter: larapars.parseArrayStringParameter, bindChangeToOtherElement: larapars.bindChangeToOtherElement, getDateFormatsOption: larapars.getDateFormatsOption}}\n */\nexport default {\n    parseArrayStringParameter: function (parameter) {\n        var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n        if (!m)\n            throw 'Requirement is not an array: \"' + parameter + '\"';\n\n        return m[1].replace(/\\'+/g, '').split(',');\n    },\n    /**\n     * This is used by various validation rules that rely on another input for validation.\n     *\n     * This function adds a 'change' event listener which forces the original to be validated again.\n     *\n     * @param rule              Name of the rule this change handler is for\n     * @param element           Which element to bind this to\n     * @param fieldInstance     The ParsleyFieldInstance we can call validate() on\n     * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n     */\n    bindChangeToOtherElement: function (rule, element, fieldInstance, originalNotEmpty) {\n        var $elem = jQuery(element);\n        var elData = $elem.data('larajqv-rules');\n\n        // None were added yet, initialise\n        if (elData === undefined) {\n            elData = [rule];\n            $elem.data('larajqv-rules', elData);\n        }\n        // Initialised, but not present\n        else if (elData.indexOf(rule) == -1) {\n            elData.push(rule);\n            $elem.data('larajqv-rules', elData);\n        }\n        // Already bound\n        else {\n            return;\n        }\n\n        // If not yet bound\n        $elem.on('change', function () {\n            if (originalNotEmpty === true && jQuery(fieldInstance.$element.get(0)).val() != '') {\n                fieldInstance.validate();\n            }\n            else if (originalNotEmpty !== true) {\n                fieldInstance.validate();\n            }\n        });\n    }\n};","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// Validate the value against a regex pattern\njQuery.validator.addMethod(\n    'regex',\n    function(value, element, param){\n        return RegExp(param).test(value);\n    },\n    'The value is in an invalid format.'\n);\n\n// THe value should be different from another input's value\njQuery.validator.addMethod(\n    'different',\n    function(value, element, param){\n\n        var otherValue = jQuery(param).val();\n\n        return otherValue == '' || otherValue != value;\n    },\n    'This value is not acceptable.'\n);\n\n// THe value should be distinct within its sibling checkboxes\njQuery.validator.addMethod(\n    'distinct',\n    function(value, element){\n        // Only validate checkboxes\n        if(jQuery(element).attr('type') != 'checkbox')\n            return true;\n\n        // get checked inputs\n        var checkedInputs = $('input[name=\"'+jQuery(element).attr('name')+'\"]:checked');\n        var inputValues = [];\n        var allUnique = true;\n\n        if(checkedInputs.length > 0)\n        {\n            checkedInputs.each(function(){\n                if(inputValues.indexOf($(this).val()) > -1)\n                {\n                    allUnique = false;\n                }\n                inputValues.push($(this).val())\n            });\n        }\n\n        return allUnique;\n    },\n    'A duplicate value has been selected.'\n);","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// The value is required only if another input's value matched one of the defined ones.\n// the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\nwindow.Parsley\n    .addValidator('requiredIf', {\n        requirementType: 'string',\n        validateString: function (value, element, parameters, fieldInstance) {\n            // Normalise the parameters\n            var values = (jQuery.isArray(parameters)) ?  utils.parseArrayStringParameter(parameters) : parameters;\n\n            // Get the other input's selector\n            var field = values[0];\n\n            // Get the values it should contain to mark this one as required\n            parameters = values.slice(1);\n\n            // make sure that the other element get's a change event\n            utils.bindChangeToOtherElement('requiredIf', field, fieldInstance);\n\n            // Only required to check if the value is empty\n            if (value.length == 0) {\n                var fieldValue = jQuery(field).val();\n\n                return parameters.indexOf(fieldValue) == -1;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if other field does not contain any of the specified values\n// the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\nwindow.Parsley\n    .addValidator('requiredUnless', {\n        requirementType: 'string',\n        validateString: function (value, element, parameters, fieldInstance) {\n            // Normalise the parameters\n            var values = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n            // Get the other input's selector\n            var field = values[0];\n\n            // Get the values it should contain to mark this one as required\n            parameters = values.slice(1);\n\n            // make sure that the other element get's a change event\n            utils.bindChangeToOtherElement('requiredUnless', field, fieldInstance);\n\n            // Only required to check if the value is empty\n            if (value.length == 0) {\n\n                var fieldValue = jQuery(field).val();\n\n                // It's not required if the input has one of the values\n                return parameters.indexOf(fieldValue) > -1;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if  any of the inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWith', {\n        requirementType: 'string',\n        validateString: function (value, element, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AnyPresent = false;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWith', id, fieldInstance);\n\n                    // If the element is in the dom and has a value\n                    if ($elem.length > 0 && $elem.val() != '') {\n                        AnyPresent = true;\n                    }\n                });\n\n                return !AnyPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if all other inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithAll', {\n        requirementType: 'string',\n        validateString: function (value, element, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AllPresent = true;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    // If the value isn't in the dom or is empty\n                    if ($elem.length == 0 || $elem.val() == '') {\n                        AllPresent = false;\n                    }\n                });\n\n                return !AllPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if any of the inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithout', {\n        requirementType: 'string',\n        validateString: function (value, element, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AnyPresent = false;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    if ($elem.length == 0 || $elem.val() == '') {\n                        AnyPresent = true;\n                    }\n                });\n\n                return AnyPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if all other inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithoutAll', {\n        requirementType: 'string',\n        validateString: function (value, element, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = (!jQuery.isArray(parameters)) ? utils.parseArrayStringParameter(parameters) : parameters;\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AllEmpty = true;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    if ($elem.length == 1  && $elem.val() != '') {\n                        AllEmpty = false;\n                    }\n                });\n\n                return AllEmpty;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\nvar filesSizes = {\n    b: 1,\n    kb: 1024,\n    mb: 1024 * 1024,\n    gb: 1024 * 1024 * 1024,\n};\n\n// Make sure all files within the inputs are equal to or smaller than the defined size.\nwindow.Parsley\n    .addValidator('fileSizeMax', {\n        requirementType: ['integer', 'string'],\n        validateString: function (value, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n            sizeMultiplyer = sizeMultiplyer.toLowerCase();\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // Multiply the max file size\n            maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n            console.log(maxSize);\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    console.log(files[i].size);\n                    if (files[i].size > maxSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'Your file(s) are too big.'\n        }\n    });\n\n\n// Make sure all files within the inputs are equal to or bigger than the defined size.\nwindow.Parsley\n    .addValidator('fileSizeMin', {\n        requirementType: ['integer', 'string'],\n        validateString: function (value, minSize, sizeMultiplyer, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // Multiply the min file size\n            minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (files[i].size < minSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'Your file(s) should are too small.'\n        }\n    });\n\n\n// Make sure all files within the inputs are between the defined sizes.\nwindow.Parsley\n    .addValidator('fileSizeBetween', {\n        requirementType: ['integer', 'integer', 'string'],\n        validateString: function (value, minSize, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // Multiply the file sizes\n            minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n            maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (files[i].size <= minSize || files[i].size >= maxSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'Your file(s) should be between %s and %s %s.'\n        }\n    });\n\n\n// Make sure all files within the input are an image\nwindow.Parsley\n    .addValidator('image', {\n        validateString: function (value, param, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (!files[i].type.match('image/*')) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This is not an image.'\n        }\n    });\n\n\n// Make sure all files within the input have one of the defined mimetypes\nwindow.Parsley\n    .addValidator('fileMimetype', {\n        requirementType: 'string',\n        validateString: function (value, mimetypes, parsleyFieldInstance) {\n            var allMimes = utils.parseArrayStringParameter(mimetypes);\n\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (allMimes.indexOf(files[i].type) == -1) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This file does not have the correct mimetype \"%s\".'\n        }\n    });\n\n\n// Make sure all files within the input have one of the defined extensions\nwindow.Parsley\n    .addValidator('fileExt', {\n        requirementType: 'string',\n        validateString: function (value, extensions, parsleyFieldInstance) {\n            var allExts = utils.parseArrayStringParameter(extensions);\n\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    var explodeNames = files[i].name.split('.');\n\n                    if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This file does not have the correct extensions.'\n        }\n    });\n\n// Make sure all images within the input have specific dimensions\nwindow.Parsley\n    .addValidator('dimensions', {\n        requirementType: {\n            '': 'boolean',\n            min_width: 'number', // Specify the minimum width the image should have\n            max_width: 'number', // Specify the maximum width the image should have\n            min_height: 'number', // Specify the minimum height the image should have\n            max_height: 'number', // Specify the maximum height the image should have\n            width: 'number', // Specify the  width the image should have\n            height: 'number', // Specify the height the image should have\n            ratio: 'string', // Specify the ratio the image should have\n        },\n        validateString: function (value, param, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            var options = parsleyFieldInstance.domOptions.dimensionsOptions;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                var defer = jQuery.Deferred();\n                var _URL = window.URL || window.webkitURL;\n\n                var image = new Image;\n\n                // Validate once t he image is loaded\n                image.onload = function () {\n                    var width = this.width;\n                    var height = this.height;\n\n                    // Check min width, if defined\n                    if (typeof options.min_width != 'undefined') {\n                        if (width < options.min_width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check max width, if defined\n                    if (typeof options.max_width != 'undefined') {\n                        if (width > options.max_width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check min height, if defined\n                    if (typeof options.min_height != 'undefined') {\n                        if (height < options.min_height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check max height, if defined\n                    if (typeof options.max_height != 'undefined') {\n                        if (height > options.max_height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check width, if defined\n                    if (typeof options.width != 'undefined') {\n                        if (width != options.width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check height, if defined\n                    if (typeof options.height != 'undefined') {\n                        if (height != options.height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check ratio, if defined\n                    if (typeof options.ratio != 'undefined') {\n                        var splitRatio = options.ratio.split(':');\n                        if (splitRatio[0] / splitRatio[1] != width / height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    defer.resolve(image);\n                };\n\n                // On error, reject the promise\n                image.onerror = function () {\n                    console.warn('image load error');\n                    defer.reject();\n                }\n\n                image.src = _URL.createObjectURL(files[0]);\n\n                return defer.promise().then(function(image){\n                    // Clean up\n                    image = null;\n\n                    return true;\n                }, function(image){\n                    // Clean up\n                    image = null;\n\n                    return false;\n                });\n            }\n\n            return true;\n        }\n    });","import jQuery from 'jquery';\nimport './rules/ins';\nimport './rules/dates';\nimport './rules/comparison';\nimport './rules/requireds.js';\nimport './rules/files.js';\nimport './utils.js';\n\n/**\n * Overwrite core Parsley methods.\n *\n * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n */\nwindow.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n    // Normally this was intended Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n\n        var requiredRules = [\n            // This one comes out of the box with parsley\n            'required',\n\n            // These ones were added with this library\n            'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n        ];\n\n        var requiredRulesFound = [];\n\n        // Loop over the list to check if they're defined on the field.\n        requiredRules.forEach(function (rule) {\n            if ('undefined' !== typeof this.constraintsByName[rule]) {\n                requiredRulesFound.push(rule);\n            }\n        }, this);\n\n        // If there's not one required rule, return false\n        if (requiredRulesFound.length == 0)\n            return false;\n\n        // If parsley's on required rule was found\n        if (requiredRulesFound.indexOf('required') >= 0) {\n            // Check if the flag is set to true\n            return false !== this.constraintsByName.required.requirements;\n        }\n\n        return true;\n    }\n});\n\nexport default utils;"],"sourceRoot":"/source/"}